openapi: 3.0.3
info:
  title: Global Indexer - Network Transparency API
  description: "Network Transparency API (NTA) is a set of APIs that provide transparency and visibility into the network. It allows users to query and retrieve information about the network. Learn more: https://forum.rss3.io/t/rss3-network-transparency-api/113"
  version: 0.1.0
servers:
  - url: https://gi.rss3.io
    description: Production
  - url: https://gi.rss3.dev
    description: Development
  - url: http://localhost
    description: Localhost
tags:
  - name: Bridge
  - name: Chips
  - name: Epoch
  - name: Networks
  - name: Node
  - name: Snapshots
  - name: Stake
paths:
  /nta/bridge/transactions:
    get:
      description: "Get bridging transactions"
      tags:
        - Bridge
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: sender
          in: query
          schema:
            type: string
        - name: receiver
          in: query
          schema:
            type: string
        - name: address
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum:
              - deposit
              - withdraw
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BridgeTransaction"
              example:
                data:
                  - id: "0xdbfa26e70977dfe2d68f3da7dd7d9e0c04136ecf14e80b98b209314ae7c462ff"
                    sender: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    receiver: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    token:
                      address:
                        l1: "0x3ef1d5be1e2ce46c583a0c8e511f015706a0ab23"
                        l2: "0x4200000000000000000000000000000000000042"
                      value: "10000000000000000000000"
                    event:
                      deposit:
                        initialized:
                          block:
                            hash: "0x7735d45a54e91e836881c2f185766b391f335b53734b0a57f6c8843f66d03a13"
                            number: 5223592
                            timestamp: 1707118764
                          transaction:
                            hash: "0x28e8d8f6cbbdfcf14501ebf0bbd11647dfabab371fc7a989a1e441321af6a6ee"
                            index: 49
                        finalized:
                          block:
                            hash: "0xb0208c1b76aca5d51cb3cde5d10a90f20c2e520c935fbb99af0b66031489433e"
                            number: 117285
                            timestamp: 1707118890
                          transaction:
                            hash: "0x493972cb6219c74071c69fd9279df74b8cebbac4d087259991253e58930a4edb"
                            index: 1
                cursor: "0xdbfa26e70977dfe2d68f3da7dd7d9e0c04136ecf14e80b98b209314ae7c462ff"
  /nta/bridge/transactions/{id}:
    get:
      description: "Get bridging transaction by id"
      tags:
        - Bridge
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/BridgeTransaction"
              example:
                data:
                  id: "0xdbfa26e70977dfe2d68f3da7dd7d9e0c04136ecf14e80b98b209314ae7c462ff"
                  sender: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                  receiver: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                  token:
                    address:
                      l1: "0x3ef1d5be1e2ce46c583a0c8e511f015706a0ab23"
                      l2: "0x4200000000000000000000000000000000000042"
                    value: "10000000000000000000000"
                  event:
                    deposit:
                      initialized:
                        block:
                          hash: "0x7735d45a54e91e836881c2f185766b391f335b53734b0a57f6c8843f66d03a13"
                          number: 5223592
                          timestamp: 1707118764
                        transaction:
                          hash: "0x28e8d8f6cbbdfcf14501ebf0bbd11647dfabab371fc7a989a1e441321af6a6ee"
                          index: 49
                      finalized:
                        block:
                          hash: "0xb0208c1b76aca5d51cb3cde5d10a90f20c2e520c935fbb99af0b66031489433e"
                          number: 117285
                          timestamp: 1707118890
                        transaction:
                          hash: "0x493972cb6219c74071c69fd9279df74b8cebbac4d087259991253e58930a4edb"
                          index: 1
  /nta/stake/transactions:
    get:
      description: "Get staking transactions"
      tags:
        - Stake
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: staker
          in: query
          schema:
            type: string
        - name: node
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum:
              - deposit
              - withdraw
              - stake
              - unstake
        - name: pending
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StakeTransaction"
              example:
                data:
                  - id: "0xbfbb8cbffc01c13c1f849ecfb53099309e189b362fd621addbfa9f5d03dcd0c1"
                    staker: "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
                    node: "0x6727a51caefcaf1bc189a8316ea09f844644b195"
                    value: "8239445455124262851652"
                    chips:
                      - id: 2105
                        node: "0x6727a51caefcaf1bc189a8316ea09f844644b195"
                        owner: "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
                        metadata:
                          name: "Chip #2105"
                          description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
                          image: "https://gi.rss3.dev/chips/2105/image.svg"
                    event:
                      deposit:
                        deposited:
                          block:
                            hash: "0x37af6202ef8303485aa3db32be6668070b6b9c7e46521325f959369847482015"
                            number: 128115
                            timestamp: 1707140550
                          transaction:
                            hash: "0x823d988f7a18215ea850010131e5fa138d8d882ae4f95716d5791a45fac57833"
                            index: 1
                cursor: "0xbfbb8cbffc01c13c1f849ecfb53099309e189b362fd621addbfa9f5d03dcd0c1"
  /nta/stake/transactions/{id}:
    get:
      description: "Get staking transaction by id"
      tags:
        - Stake
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/StakeTransaction"
  /nta/stake/stakings:
    get:
      description: "Get a list of stakers and Nodes"
      tags:
        - Stake
      parameters:
        - name: staker
          in: query
          schema:
            type: string
        - name: node
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StakeStaking"
                  cursor:
                    type: string
                    example: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
              example:
                data:
                  - staker: "0x827431510a5d249ce4fdb7f00c83a3353f471848"
                    node: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    chips:
                      total: 1
                      showcase:
                        - id: 21
                          node: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                          owner: "0x827431510a5d249ce4fdb7f00c83a3353f471848"
                          metadata:
                            name: "Chip #21"
                            description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
                            image: "https://gi.rss3.dev/chips/21/image.svg"
                cursor: "MHg4Mjc0MzE1MTBhNWQyNDljZTRmZGI3ZjAwYzgzYTMzNTNmNDcxODQ4LTB4M2I2ZDAyYTI0ZGY2ODFmZmRmNjIxZDM1ZDcwYWJhN2FkYWFjMDdjMQ=="
  /nta/stake/{owner}/profit:
    get:
      description: "Get staking profit of a staker"
      tags:
        - Stake
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      owner:
                        type: string
                      totalChipAmounts:
                        type: string
                      totalChipValues:
                        type: string
                      oneDay:
                        $ref: "#/components/schemas/ChipPNL"
                      oneWeek:
                        $ref: "#/components/schemas/ChipPNL"
                      oneMonth:
                        $ref: "#/components/schemas/ChipPNL"
  /nta/chips:
    get:
      description: "Get all chips"
      tags:
        - Chips
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: array
            items:
              type: integer
        - name: node
          in: query
          schema:
            type: string
        - name: owner
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Chips"
                  cursor:
                    type: string
  /nta/chips/{id}:
    get:
      description: "Get Chips by id"
      tags:
        - Chips
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chips"
        404:
          description: "Not found"
  /nta/chips/{id}/image.svg:
    get:
      description: "Get Chips image by id"
      tags:
        - Chips
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            image/svg+xml:
              schema:
                type: string
        404:
          description: "Not found"
  /nta/snapshots/nodes/count:
    get:
      description: "Get snapshots of Node count"
      tags:
        - Snapshots
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                        count:
                          type: integer
              example:
                data:
                  - date: "2024-02-19"
                    count: 2
  /nta/snapshots/nodes/minTokensToStake:
    post:
        description: "Get snapshots of the minimum staking amount for Nodes"
        tags:
            - Snapshots
        requestBody:
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    nodeAddresses:
                      type: array
                      items:
                          type: string
                    onlyStartAndEnd:
                      type: boolean
                      description: "If true, only return the start and end minTokensToStake"
                  example:
                    nodeAddresses:
                      - "0x9c29e25d7e475caee73d4b7006f3b10e977773ac"
                      - "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    onlyStartAndEnd: true
        responses:
            200:
              description: "OK"
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/NodeMinTokensToStakeSnapshot"
  /nta/snapshots/stakers/count:
    get:
      description: "Get snapshots of total staker count"
      tags:
        - Snapshots
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                        count:
                          type: integer
              example:
                data:
                  - date: "2024-02-19"
                    count: 2
  /nta/snapshots/stakers/profit:
    get:
        description: "Get snapshots of the profit of stakers"
        tags:
            - Snapshots
        parameters:
          - name: ownerAddress
            in: query
            required: true
            schema:
              type: string
          - name: cursor
            in: query
            schema:
              type: string
          - name: limit
            in: query
            schema:
              type: integer
            description: "The number of snapshots to return, if not provided, return all snapshots"
          - name: beforeDate
            in: query
            schema:
              type: string
              format: date
            description: "The date before which the snapshots are returned"
          - name: afterDate
            in: query
            schema:
              type: string
              format: date
            description: "The date after which the snapshots are returned"
        responses:
          200:
            description: "OK"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/StakerProfitSnapshot"
                    cursor:
                      type: string
  /nta/snapshots/operators/profit:
    get:
        description: "Get snapshots of the profit of operators"
        tags:
            - Snapshots
        parameters:
          - name: operator
            in: query
            required: true
            schema:
              type: string
          - name: cursor
            in: query
            schema:
              type: string
          - name: limit
            in: query
            schema:
              type: integer
            description: "The number of snapshots to return, if not provided, return all snapshots"
          - name: beforeDate
            in: query
            schema:
              type: string
              format: date
            description: "The date before which the snapshots are returned"
          - name: afterDate
            in: query
            schema:
              type: string
              format: date
            description: "The date after which the snapshots are returned"
        responses:
          200:
            description: "OK"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/OperationProfit"
                    cursor:
                      type: string
  /nta/nodes:
    get:
      description: "Get all Nodes"
      tags:
        - Node
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: "The number of Nodes to return, default is 10, maximum is 50"
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: nodeAddress
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/Node"
        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
  /nta/nodes/{address}:
    get:
      description: "Get Node by address"
      tags:
        - Node
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
  /nta/nodes/{address}/avatar.svg:
    get:
      description: "Get Node avatar by address"
      tags:
        - Node
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            image/svg+xml:
              schema:
                type: string
        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
  /nta/nodes/{address}/events:
    get:
      description: "Get Node transaction events by address"
      tags:
        - Node
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/NodeEvent"
                  cursor:
                    type: string

        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
  /nta/operation/{operator}/profit:
    get:
      description: "Get Node operation profit by operator"
      tags:
        - Node
      parameters:
        - name: operator
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      address:
                        type: string
                      operationPool:
                        type: string
                      oneDay:
                        $ref: "#/components/schemas/OperationProfitPNL"
                      oneWeek:
                       $ref: "#/components/schemas/OperationProfitPNL"
                      oneMonth:
                        $ref: "#/components/schemas/OperationProfitPNL"
  /nta/epochs:
    get:
      description: "Get all epochs"
      tags:
        - Epoch
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefEpoch"
                  cursor:
                    type: string
  /nta/epochs/{id}:
    get:
      description: "Get epoch by id"
      tags:
        - Epoch
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Epoch"
  /nta/epochs/distributions/{transaction}:
    get:
      description: "Get epoch transaction by hash"
      tags:
        - Epoch
      parameters:
        - name: transaction
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EpochDistribution"
  /nta/epochs/{node}/rewards:
    get:
      description: "Get Node rewards by epoch"
      tags:
        - Epoch
      parameters:
        - name: node
          in: path
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 50
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Epoch"
                  cursor:
                    type: string
  /nta/networks:
    get:
      description: "Get all compatible networks"
      tags:
        - Networks
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
  /nta/networks/{network}/list-workers:
    get:
      description: "Get available workers by network"
      tags:
        - Networks
      parameters:
        - name: network
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
  /nta/networks/{network}/workers/{worker}:
    get:
      description: "Get config by network and worker"
      tags:
        - Networks
      parameters:
        - name: network
          in: path
          required: true
          schema:
            type: string
        - name: worker
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/NetworkWorker"
        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
components:
  schemas:
    BridgeTransaction:
      type: object
      properties:
        id:
          type: string
        sender:
          type: string
        receiver:
          type: string
        token:
          type: object
          properties:
            address:
              type: object
              properties:
                l1:
                  type: string
                l2:
                  type: string
            value:
              type: string
        event:
          properties:
            deposit:
              type: object
              nullable: true
              properties:
                initialized:
                  $ref: "#/components/schemas/TransactionEvent"
                finalized:
                  $ref: "#/components/schemas/TransactionEvent"
            withdraw:
              type: object
              nullable: true
              properties:
                initialized:
                  $ref: "#/components/schemas/TransactionEvent"
                proved:
                  $ref: "#/components/schemas/TransactionEvent"
                finalized:
                  $ref: "#/components/schemas/TransactionEvent"
      example:
        id: "0xdbfa26e70977dfe2d68f3da7dd7d9e0c04136ecf14e80b98b209314ae7c462ff"
        sender: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
        receiver: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
        token:
          address:
            l1: "0x3ef1d5be1e2ce46c583a0c8e511f015706a0ab23"
            l2: "0x4200000000000000000000000000000000000042"
          value: "10000000000000000000000"
        event:
          deposit:
            initialized:
              block:
                hash: "0x7735d45a54e91e836881c2f185766b391f335b53734b0a57f6c8843f66d03a13"
                number: 5223592
                timestamp: 1707118764
              transaction:
                hash: "0x28e8d8f6cbbdfcf14501ebf0bbd11647dfabab371fc7a989a1e441321af6a6ee"
                index: 49
            finalized:
              block:
                hash: "0xb0208c1b76aca5d51cb3cde5d10a90f20c2e520c935fbb99af0b66031489433e"
                number: 117285
                timestamp: 1707118890
              transaction:
                hash: "0x493972cb6219c74071c69fd9279df74b8cebbac4d087259991253e58930a4edb"
                index: 1
    StakeTransaction:
      type: object
      properties:
        id:
          type: string
        staker:
          type: string
        node:
          type: string
        value:
          type: string
        chips:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Chips"
        event:
          properties:
            deposit:
              type: object
              nullable: true
              properties:
                requested:
                  $ref: "#/components/schemas/TransactionEvent"
                claimed:
                  $ref: "#/components/schemas/TransactionEvent"
            withdraw:
              type: object
              nullable: true
              properties:
                deposited:
                  $ref: "#/components/schemas/TransactionEvent"
            stake:
              type: object
              nullable: true
              properties:
                staked:
                  $ref: "#/components/schemas/TransactionEvent"
            unstake:
              type: object
              nullable: true
              properties:
                requested:
                  $ref: "#/components/schemas/TransactionEvent"
                claimed:
                  $ref: "#/components/schemas/TransactionEvent"
      example:
        id: "0xbfbb8cbffc01c13c1f849ecfb53099309e189b362fd621addbfa9f5d03dcd0c1"
        staker: "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
        node: "0x6727a51caefcaf1bc189a8316ea09f844644b195"
        value: "8239445455124262851652"
        chips:
          - id: 2105
            node: "0x6727a51caefcaf1bc189a8316ea09f844644b195"
            owner: "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
            metadata:
              name: "Chip #2105"
              description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
              image: "https://gi.rss3.dev/chips/2105/image.svg"
        event:
          deposit:
            deposited:
              block:
                hash: "0x37af6202ef8303485aa3db32be6668070b6b9c7e46521325f959369847482015"
                number: 128115
                timestamp: 1707140550
              transaction:
                hash: "0x823d988f7a18215ea850010131e5fa138d8d882ae4f95716d5791a45fac57833"
                index: 1
    TransactionEvent:
      type: object
      nullable: true
      properties:
        block:
          properties:
            hash:
              type: string
            number:
              type: integer
            timestamp:
              type: integer
        transaction:
          type: object
          properties:
            hash:
              type: string
            index:
              type: integer
      example:
        block:
          hash: "0x200b26e118e51f23d052ef3aa92bc411dbd0a6ce811f511adb9f6049dc938614"
          number: 726419
          timestamp: 1708337158
        transaction:
          hash: "0x6595192f1193c2584c28e7d4b50b9208242bf9b4538933f0081d3f4625373d2f"
          index: 1
    StakeStaking:
      type: object
      properties:
        staker:
          type: string
        node:
          type: string
        chips:
          type: object
          properties:
            total:
              type: integer
            showcase:
              type: array
              items:
                $ref: "#/components/schemas/Chips"
      example:
        staker: 0x3b6d02a24df681ffdf621d35d70aba7adaac07c1
        node: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
        chips:
          total: 200
          showcase:
            - id: 275
              node: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
              owner: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
              metadata:
                name: "Chip #275"
                description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
                image: "https://gi.rss3.dev/chips/275/image.svg"
            - id: 276
              node: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
              owner: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
              metadata:
                name: "Chip #276"
                description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
                image: "https://gi.rss3.dev/chips/275/image.svg"
            - id: 277
              node: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
              owner: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
              metadata:
                name: "Chip #277"
                description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
                image: "https://gi.rss3.dev/chips/275/image.svg"
            - id: 278
              node: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
              owner: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
              metadata:
                name: "Chip #278"
                description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
                image: "https://gi.rss3.dev/chips/275/image.svg"
            - id: 279
              node: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
              owner: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
              metadata:
                name: "Chip #279"
                description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
                image: "https://gi.rss3.dev/chips/275/image.svg"
    Chips:
      type: object
      properties:
        id:
          type: integer
        node:
          type: string
        owner:
          type: string
        metadata:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            image:
              type: string
        value:
          type: string
          description: "the value at time of minting"
        latestValue:
          type: string
          description: "The latest value of the chip"
      example:
        id: 474
        node: "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
        owner: "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
        metadata:
          name: "Chip #474"
          description: "Chip is a unique NFT that represents a Node in the network. It is generated based on the node's address and token ID."
          image: "https://gi.rss3.dev/chips/474/image.svg"
        value: "5000000000000000000000"
        latestValue: "5500000000000000000000"
    Node:
      type: object
      properties:
        id:
          type: integer
        address:
          type: string
        name:
          type: string
        description:
          type: string
        taxRateBasisPoints:
          type: integer
          nullable: true
        isPublicGood:
          type: boolean
        operationPoolTokens:
          type: string
        stakingPoolTokens:
          type: string
        totalShares:
          type: string
        slashedTokens:
          type: string
        status:
          type: string
          enum:
            - registered
            - online
            - offline
            - exited
        lastHeartbeat:
          type: integer
          description: "The timestamp of the last heartbeat"
        local:
          type: array
          items:
            type: object
            properties:
              country:
                type: string
              region:
                type: string
              city:
                type: string
              latitude:
                type: number
              longitude:
                type: number
        avatar:
          type: object
          properties:
            name:
              type: string
            image:
              type: string
            description:
              type: string
        minTokensToStake:
          type: string
        createAt:
          type: integer
          description: "The timestamp of the Node creation"
      example:
        id: 1
        address: "0xc5999271b01afc77ed7a6738b40c34677c2a581c"
        name: "RSS3 Node"
        description: "Get started with RSS3 Node with symphonia"
        taxRateBasisPoints: 1000
        isPublicGood: false
        operationPoolTokens: "10000000000000000000000"
        stakingPoolTokens: "0"
        totalShares: "0"
        slashedTokens: "0"
        status: "online"
        lastHeartbeat: 1709117916
        local:
          - country: "CN"
            region: "GD"
            city: "SZ"
            latitude: 22.5431
            longitude: 114.0579
        avatar:
          - name: "Node Avatar"
            description: ""
            image: "http://127.0.0.1/nodes/0xC5999271b01AfC77ED7a6738b40C34677C2A581c/avatar.svg"
        minTokensToStake: "0"
        createdAt: 1709087910
    NodeEvent:
      type: object
      properties:
        addressFrom:
          type: string
        addressTo:
          type: string
        nodeID:
          type: integer
        type:
          type: string
          enum:
              - nodeCreated
        logIndex:
          type: integer
        chainID:
          type: integer
        block:
          type: object
          properties:
            hash:
              type: string
            number:
              type: integer
            timestamp:
              type: integer
        transaction:
          type: object
          properties:
            hash:
              type: string
            index:
              type: integer
        metadata:
          type: object
          properties:
            nodeCreated:
              type: object
              properties:
                nodeID:
                  type: integer
                address:
                  type: string
                name:
                  type: string
                description:
                  type: string
                taxRateBasisPoints:
                  type: integer
                isPublicGood:
                  type: boolean
    NodeMinTokensToStakeSnapshot:
      type: object
      properties:
        nodeAddress:
          type: string
        snapshots:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                example: "2024-03-13T00:08:38+08:00"
              epochID:
                type: integer
              nodeAddress:
                type: string
              minTokensToStake:
                type: string
              createdAt:
                type: string
              updatedAt:
                type: string
    StakerProfitSnapshot:
      type: object
      properties:
        ownerAddress:
          type: string
        date:
          type: string
          example: "2024-03-13T00:08:38+08:00"
        epochID:
          type: integer
        totalChipAmounts:
          type: string
        totalChipValues:
          type: string
    ChipPNL:
      type: object
      properties:
        date:
          type: string
        totalChipAmounts:
          type: string
        totalChipValues:
          type: string
        pnl:
          type: string
    OperationProfit:
      type: object
      properties:
        operator:
          type: string
        date:
          type: string
          example: "2024-03-13T00:08:38+08:00"
        epochID:
          type: integer
        operationPool:
          type: string
    OperationProfitPNL:
      type: object
      properties:
        date:
          type: string
        operationPool:
          type: string
        pnl:
          type: string
    BriefEpoch:
      type: object
      properties:
        id:
          type: integer
        startTimestamp:
          type: integer
        endTimestamp:
          type: integer
        totalOperationRewards:
          type: string
        totalStakingRewards:
          type: string
        totalRequestCounts:
          type: string
        totalRewardItems:
          type: integer
        distributions:
          type: array
          items:
            $ref: "#/components/schemas/BriefEpochDistribution"
    Epoch:
      type: object
      properties:
        id:
          type: integer
        startTimestamp:
          type: integer
        endTimestamp:
            type: integer
        totalOperationRewards:
          type: string
        totalStakingRewards:
          type: string
        totalRequestCounts:
          type: string
        totalRewardItems:
          type: integer
        distributions:
          type: array
          items:
            $ref: "#/components/schemas/EpochDistribution"
    BriefEpochDistribution:
      type: object
      properties:
        id:
          type: integer
        startTimestamp:
          type: integer
        endTimestamp:
          type: integer
        transaction:
          type: object
          properties:
            hash:
              type: string
            index:
              type: integer
        block:
          type: object
          properties:
            hash:
              type: string
            number:
              type: integer
            timestamp:
              type: integer
        totalOperationRewards:
          type: string
        totalStakingRewards:
          type: string
        totalRequestCounts:
          type: string
        totalRewardItems:
          type: integer
    EpochDistribution:
      type: object
      properties:
        id:
          type: integer
        startTimestamp:
          type: integer
        endTimestamp:
          type: integer
        transaction:
          type: object
          properties:
            hash:
              type: string
            index:
              type: integer
        block:
          type: object
          properties:
            hash:
              type: string
            number:
              type: integer
            timestamp:
              type: integer
        totalOperationRewards:
          type: string
        totalStakingRewards:
          type: string
        totalRequestCounts:
          type: string
        totalRewardItems:
          type: integer
        rewardItems:
          type: array
          items:
            type: object
            properties:
              epochID:
                type: integer
              index:
                type: integer
              transactionHash:
                type: string
              nodeAddress:
                type: string
              operationRewards:
                type: string
              stakingRewards:
                type: string
              taxAmounts:
                type: string
              requestCounts:
                type: string
    WorkerDetail:
      type: object
      properties:
        isRequired:
          type: boolean
        type:
          type: string
        value:
          type: string
        description:
          type: string
    NetworkWorker:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/WorkerDetail"
        network:
          $ref: "#/components/schemas/WorkerDetail"
        worker:
            $ref: "#/components/schemas/WorkerDetail"
        endpoint:
            $ref: "#/components/schemas/WorkerDetail"
        parameters:
            type: object
            properties:
              block_number_start:
                $ref: "#/components/schemas/WorkerDetail"
              block_number_target:
                $ref: "#/components/schemas/WorkerDetail"
              rpc_thread_blocks:
                $ref: "#/components/schemas/WorkerDetail"
              rpc_batch_blocks:
                $ref: "#/components/schemas/WorkerDetail"
              rpc_batch_receipts:
                $ref: "#/components/schemas/WorkerDetail"
              rpc_batch_block_receipts:
                $ref: "#/components/schemas/WorkerDetail"
      example:
        id:
          isRequired: true
          type: "string"
          value: "ethereum-core"
          description: "You can define your own worker id, you are recommended to use `[network]-[worker]`"
        network:
            isRequired: true
            type: "string"
            value: "ethereum"
            description: "Your worker is running on the defined network"
        worker:
            isRequired: true
            type: "string"
            value: "core"
            description: "Your worker is running the defined worker"
        endpoint:
            isRequired: true
            type: "string"
            value: "https://rpc.ankr.com/eth"
            description: "You can fill this field with a global endpoint id (should be pre-defined in endpoints part) or a url"
        parameters:
          block_number_start:
            isRequired: false
            type: "big.Int"
            value: "null"
            description: "Your worker will start from this block number, if it's not defined, we will use the recommended one(~3 months)"
          block_number_target:
            isRequired: false
            type: "big.Int"
            value: "null"
            description: "The block number to target the worker"
          rpc_thread_blocks:
            isRequired: false
            type: "uint"
            value: "8"
            description: "The number of blocks to process in a thread"
          rpc_batch_blocks:
            isRequired: false
            type: "uint"
            value: "8"
            description: "The number of blocks to process in a batch"
          rpc_batch_receipts:
            isRequired: false
            type: "uint"
            value: "200"
            description: "The number of receipts to process in a batch"
          rpc_batch_block_receipts:
            isRequired: false
            type: "uint"
            value: "8"
            description: "The number of block receipts to process in a batch"


