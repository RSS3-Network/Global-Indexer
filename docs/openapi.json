{
    "openapi": "3.0.3",
    "info": {
        "title": "Global Indexer API",
        "description": "An RSS3 Global Indexer (GI), is responsible for facilitating coordination among RSS3 Nodes, engaging with the VSL and performing critical functions such as Network Rewards calculation and slashing enforcement. Global Indexer API provides RSS3 Node data query (DSL) and network transparency (NTA) functions.",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://gi.rss3.io",
            "description": "Production"
        },
        {
            "url": "https://gi.rss3.dev",
            "description": "Development"
        },
        {
            "url": "http://localhost",
            "description": "Localhost"
        }
    ],
    "tags": [
        {
            "name": "DSL",
            "description": "The DSL API is an interface to interact with RSS3 Nodes and, therefore, the entire decentralized DSL."
        },
        {
            "name": "NTA",
            "description": "The Network Transparency API (NTA) is a set of APIs that provide transparency and visibility into the network. It allows users to query and retrieve information about the network. Learn more: https://forum.rss3.io/t/rss3-network-transparency-api/113"
        },
        {
            "name": "Decentralized",
            "description": "A subset of DSL, these APIs facilitate querying information on decentralized networks."
        },
        {
            "name": "RSS",
            "description": "A subset of DSL, these APIs facilitate querying information conforming to the RSS Specification."
        },
        {
            "name": "Node",
            "description": "A subset of NTA, these APIs provide information about nodes in the RSS3 network."
        },
        {
            "name": "Epoch",
            "description": "A subset of NTA, these APIs provide information on each Epoch in the VSL."
        },
        {
            "name": "Stake",
            "description": "A subset of NTA, these APIs provide information on Stake transactions in the VSL."
        },
        {
            "name": "Chips",
            "description": "A subset of NTA, these APIs provide information and transaction queries related to Chips in the VSL."
        },
        {
            "name": "Bridge",
            "description": "A subset of NTA, these APIs provide querying cross-chain bridge transactions in the VSL."
        },
        {
            "name": "Networks",
            "description": "A subset of NTA, these APIs provide information about the open information networks indexed by the RSS3 network."
        },
        {
            "name": "Snapshots",
            "description": "A subset of NTA, these APIs provide snapshots of various data within the RSS3 network."
        }
    ],
    "paths": {
        "/decentralized/tx/{id}": {
            "get": {
                "summary": "Get Activity by ID",
                "description": "This endpoint retrieves the details of a specified decentralized transaction activity by its ID. You can also specify additional query parameters to limit the number of actions retrieved and to paginate through actions.",
                "tags": [
                    "Decentralized",
                    "DSL"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/activity_id_path"
                    },
                    {
                        "$ref": "#/components/parameters/action_limit_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_page_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ActivityResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/decentralized/{account}": {
            "get": {
                "summary": "Get Account Activities",
                "description": "This endpoint retrieves the activities associated with a specified account in the decentralized system. You can use various query parameters to filter and paginate the results, including limits on the number of activities and actions, timestamps, success status, direction, and more.",
                "tags": [
                    "Decentralized",
                    "DSL"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/account_path"
                    },
                    {
                        "$ref": "#/components/parameters/limit_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_limit_query"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/since_timestamp_query"
                    },
                    {
                        "$ref": "#/components/parameters/until_timestamp_query"
                    },
                    {
                        "$ref": "#/components/parameters/success_query"
                    },
                    {
                        "$ref": "#/components/parameters/direction_query"
                    },
                    {
                        "$ref": "#/components/parameters/network_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_tag_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_type_query"
                    },
                    {
                        "$ref": "#/components/parameters/platform_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ActivitiesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/rss/{path}": {
            "get": {
                "summary": "Get RSS Activity by Path",
                "tags": [
                    "RSS",
                    "DSL"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/rss_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/RSSActivitiesResponse"
                    },
                    "404": {
                        "description": "The specified RSS path was not found."
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/bridgings/transactions": {
            "get": {
                "summary": "Get bridging transactions",
                "description": "Retrieve a list of bridging transactions based on various query parameters such as cursor, sender, receiver, address, transaction type, and limit. This endpoint allows users to filter transactions to get precise data related to deposits and withdrawals. The response includes detailed transaction information, including sender and receiver addresses, token details, and associated events such as deposit initialization and finalization. Use this endpoint for monitoring, auditing, or analyzing bridging transactions. The 'cursor' parameter can be used for pagination to fetch subsequent sets of results.",
                "tags": [
                    "Bridge",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/sender_query"
                    },
                    {
                        "$ref": "#/components/parameters/receiver_query"
                    },
                    {
                        "$ref": "#/components/parameters/address_query"
                    },
                    {
                        "$ref": "#/components/parameters/bridging_type_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/BridgeTransactionsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/bridgings/transactions/{transaction_hash}": {
            "get": {
                "summary": "Get bridging transaction by hash",
                "description": "Retrieve detailed information of a bridging transaction by specifying the transaction hash. This endpoint provides comprehensive data about a single transaction, including sender, receiver, token details, and related events.",
                "tags": [
                    "Bridge",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bridging_transaction_hash_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/BridgeTransactionByHashResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/stakings/transactions": {
            "get": {
                "summary": "Get staking transactions",
                "description": "Retrieve a list of staking transactions based on various query parameters such as cursor, staker, node, transaction type, pending status, and limit. This endpoint allows users to filter transactions to get precise data related to staking activities including deposits, withdrawals, stakes, and unstakes. The response includes detailed transaction information such as staker address, node address, value staked, associated chips, and related events. Use this endpoint for monitoring, auditing, or analyzing staking transactions. The 'cursor' parameter can be used for pagination to fetch subsequent sets of results.",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/staker_query"
                    },
                    {
                        "$ref": "#/components/parameters/node_query"
                    },
                    {
                        "$ref": "#/components/parameters/staking_type_query"
                    },
                    {
                        "$ref": "#/components/parameters/pending_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakeTransactionsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/stakings/transactions/{transaction_hash}": {
            "get": {
                "summary": "Get staking transaction by hash",
                "description": "Retrieve detailed information of a staking transaction by specifying the transaction hash. This endpoint provides comprehensive data about a single staking transaction, including staker address, node address, value staked, associated chips, and related events.",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/staking_transaction_hash_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakeTransactionByHashResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/stakings/stakings": {
            "get": {
                "summary": "Get a list of stakers and Nodes",
                "description": "Retrieve a list of stakers and their associated Nodes. This endpoint allows users to filter the results by staker address, node address, and to paginate through the results using cursor and limit parameters. The response includes detailed information about each staker, node, and associated chips.",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/staker_query"
                    },
                    {
                        "$ref": "#/components/parameters/node_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakeStakingsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/stakings/{staker_address}/profit": {
            "get": {
                "summary": "Get staking profit of a staker",
                "description": "Retrieve the staking profit information for a specified staker. This endpoint returns detailed profit data, including the owner's address, total chip amount, total chip value, and profit and loss (PNL) data over different time periods (one day, one week, one month).",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/staker_address_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakingProfitResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/chips": {
            "get": {
                "summary": "Get all chips",
                "description": "Retrieve a list of all chips. This endpoint allows users to filter the results by cursor, chip IDs, node address, owner address, and to paginate through the results using cursor and limit parameters. The response includes detailed information about each chip and a cursor for pagination to fetch subsequent sets of results.",
                "tags": [
                    "Chips",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/chip_ids_query"
                    },
                    {
                        "$ref": "#/components/parameters/node_query"
                    },
                    {
                        "$ref": "#/components/parameters/owner_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ChipsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/chips/{chip_id}": {
            "get": {
                "summary": "Get Chips by chip id",
                "description": "Retrieve detailed information about a specific chip by its unique chip ID. This endpoint returns comprehensive data about the chip, including its node address, owner address, and metadata such as name, description, and image.",
                "tags": [
                    "Chips",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/chip_id_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ChipResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/chips/{chip_id}/image.svg": {
            "get": {
                "summary": "Get Chips image by id",
                "description": "Retrieve the image of a specific chip by its unique chip ID. This endpoint returns the SVG image associated with the chip.",
                "tags": [
                    "Chips",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/chip_id_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ChipImageResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/snapshots/nodes/count": {
            "get": {
                "summary": "Get snapshots of Node count",
                "description": "Retrieve snapshots of the node count over time. This endpoint returns an array of objects, each containing the date and the corresponding count of nodes on that date.",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodeCountSnapshotsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/snapshots/nodes/min_tokens_to_stake": {
            "post": {
                "summary": "Get snapshots of the minimum staking amount",
                "description": "Retrieve snapshots of the minimum staking amount for specified nodes. This endpoint allows users to specify a list of node addresses and optionally return only the start and end values of the minimum tokens to stake.",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/NodeMinTokensToStakeRequestBody"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodeMinTokensToStakeResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/snapshots/stakers/count": {
            "get": {
                "summary": "Get snapshots of staker count",
                "description": "Retrieve snapshots of the total staker count over time. This endpoint returns an array of objects, each containing the date and the corresponding count of stakers on that date.",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakerCountSnapshotsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/snapshots/stakers/profit": {
            "get": {
                "summary": "Get snapshots of the staker profit",
                "description": "Retrieve snapshots of the staker profit over time. This endpoint allows filtering by staker address, date range, and pagination parameters.",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/staker_address_query"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    },
                    {
                        "$ref": "#/components/parameters/before_date_query"
                    },
                    {
                        "$ref": "#/components/parameters/after_date_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakerProfitSnapshotsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/snapshots/nodes/operation/profit": {
            "get": {
                "summary": "Get snapshots of operation profit",
                "description": "Retrieve snapshots of the operation profit over time for a specific node. This endpoint allows filtering by node address, date range, and pagination parameters.",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/node_address_query"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    },
                    {
                        "$ref": "#/components/parameters/before_date_query"
                    },
                    {
                        "$ref": "#/components/parameters/after_date_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/OperationProfitSnapshotsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/snapshots/epochs/apy": {
            "get": {
                "summary": "Get the APY of epoch snapshots",
                "description": "Retrieve the Annual Percentage Yield (APY) for epoch snapshots. This endpoint returns an array of objects, each containing the epoch details and the corresponding APY.",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EpochAPYSnapshotsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/nodes": {
            "get": {
                "summary": "Get all Nodes",
                "description": "Retrieve a list of all nodes. This endpoint allows filtering by cursor, limit, and node address. The default limit is 10 and the maximum limit is 50.",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    },
                    {
                        "$ref": "#/components/parameters/node_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodesResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/nodes/{address}": {
            "get": {
                "summary": "Get Node by address",
                "description": "Retrieve detailed information about a specific node by its address.",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/node_address_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodeResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/nodes/{address}/avatar.svg": {
            "get": {
                "summary": "Get Node avatar by address",
                "description": "Retrieve the avatar of a specific node by its address. This endpoint returns the SVG image associated with the node.",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/node_address_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodeAvatarResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/nodes/{address}/events": {
            "get": {
                "summary": "Get Node transaction events by address",
                "description": "Retrieve the transaction events for a specific node by its address. This endpoint allows filtering by cursor and limit for pagination.",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/node_address_path"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodeEventsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/nodes/{address}/operation/profit": {
            "get": {
                "summary": "Get Node operation profit by address",
                "description": "Retrieve the operation profit details for a specific node by its address. This endpoint provides detailed profit and loss (PNL) information over different time periods.",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/node_address_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodeOperationProfitResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/epochs": {
            "get": {
                "summary": "Get all epochs",
                "description": "Retrieve a list of all epochs. This endpoint allows filtering by cursor and limit for pagination. The default limit is 10 and the maximum limit is 50.",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EpochsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/epochs/{epoch_id}": {
            "get": {
                "summary": "Get epoch by id",
                "description": "Retrieve detailed information about a specific epoch by its ID.",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/epoch_id_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EpochResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/epochs/distributions/{transaction_hash}": {
            "get": {
                "summary": "Get epoch transaction by hash",
                "description": "Retrieve details of an epoch transaction by its hash.",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/epoch_transaction_hash_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EpochTransactionResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/epochs/{address}/rewards": {
            "get": {
                "summary": "Get Node rewards by epoch",
                "description": "Retrieve the rewards of a specific node by epoch. This endpoint allows filtering by cursor and limit for pagination.",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/node_address_path"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NodeRewardsByEpochResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/epochs/apy": {
            "get": {
                "summary": "Get the average of epochs APY",
                "description": "Retrieve the average Annual Percentage Yield (APY) for all epochs.",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EpochsAverageAPYResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/networks": {
            "get": {
                "summary": "Get all compatible networks",
                "description": "Retrieve a list of all compatible networks.",
                "tags": [
                    "Networks",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NetworksResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/networks/{network_name}/list_workers": {
            "get": {
                "summary": "Get available workers by network",
                "description": "Retrieve a list of available workers for a specific network.",
                "tags": [
                    "Networks",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/network_name_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NetworkWorkersResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/nta/networks/{network_name}/workers/{worker_name}": {
            "get": {
                "summary": "Get config by network and worker",
                "description": "Retrieve the configuration details for a specific worker in a specific network.",
                "tags": [
                    "Networks",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/network_name_path"
                    },
                    {
                        "$ref": "#/components/parameters/worker_name_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NetworkWorkerConfigResponse"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Action": {
                "description": "Represents an individual action within an activity.",
                "properties": {
                    "from": {
                        "description": "The address from which the action originated.",
                        "type": "string"
                    },
                    "metadata": {
                        "description": "Additional metadata related to the action.",
                        "type": "object"
                    },
                    "platform": {
                        "$ref": "#/components/schemas/Platform"
                    },
                    "related_urls": {
                        "description": "A list of URLs related to the action.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/Tag"
                    },
                    "to": {
                        "description": "The address to which the action is directed.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of action performed.",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "tag": "transaction",
                    "type": "transfer",
                    "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
                    "to": "0xefC5f77c5AD5DB85bc287E80d8c3B88c3f27662C",
                    "metadata": {
                        "address": "0x7964B6A8aE5a71409e7E17a5b2669903A27997Ac",
                        "value": "10000000000000000000000",
                        "name": "PlayDoge",
                        "symbol": "PLAY",
                        "decimals": 18,
                        "standard": "ERC-20"
                    },
                    "related_urls": [
                        "https://etherscan.io/tx/0x840e42d573ebe1ff27a9e4914573b4e0518fcd685c7f9331d319abe854f780e3"
                    ]
                }
            },
            "ActivitiesResponse": {
                "description": "The response structure for a list of activities.",
                "properties": {
                    "data": {
                        "description": "The list of activities.",
                        "items": {
                            "$ref": "#/components/schemas/Activity"
                        },
                        "type": "array"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaCursor"
                    }
                },
                "type": "object"
            },
            "Activity": {
                "properties": {
                    "id": {
                        "description": "The unique identifier for the activity.",
                        "type": "string",
                        "example": "0x840e42d573ebe1ff27a9e4914573b4e0518fcd685c7f9331d319abe854f780e3"
                    },
                    "owner": {
                        "description": "The owner of the activity.",
                        "type": "string",
                        "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
                    },
                    "network": {
                        "$ref": "#/components/schemas/Network"
                    },
                    "from": {
                        "description": "The address from which the activity originated.",
                        "type": "string",
                        "example": "0xBAB4d1f27bAA7762a4d822B80C647F715922492f"
                    },
                    "to": {
                        "description": "The address to which the activity is directed.",
                        "type": "string",
                        "example": "0x7964B6A8aE5a71409e7E17a5b2669903A27997Ac"
                    },
                    "index": {
                        "description": "The index of the activity in the list.",
                        "type": "integer",
                        "example": 0
                    },
                    "platform": {
                        "$ref": "#/components/schemas/Platform"
                    },
                    "success": {
                        "description": "Indicates whether the activity was successful.",
                        "type": "boolean",
                        "example": true
                    },
                    "tag": {
                        "$ref": "#/components/schemas/Tag"
                    },
                    "type": {
                        "$ref": "#/components/schemas/Type"
                    },
                    "calldata": {
                        "$ref": "#/components/schemas/Calldata"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/Direction"
                    },
                    "fee": {
                        "$ref": "#/components/schemas/Fee"
                    },
                    "timestamp": {
                        "description": "The timestamp of when the activity occurred.",
                        "type": "integer",
                        "example": 1718689727
                    },
                    "total_actions": {
                        "description": "The total number of actions within the activity.",
                        "type": "integer",
                        "example": 1
                    },
                    "actions": {
                        "description": "The list of actions within the activity.",
                        "items": {
                            "$ref": "#/components/schemas/Action"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ActivityResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Activity"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaTotalPages"
                    }
                },
                "type": "object"
            },
            "Calldata": {
                "description": "Represents the call data associated with an activity.",
                "properties": {
                    "function_hash": {
                        "description": "The hash of the function called.",
                        "type": "string"
                    },
                    "parsed_function": {
                        "description": "The parsed function name.",
                        "type": "string"
                    },
                    "raw": {
                        "description": "The raw call data.",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "function_hash": "0x4022b75e"
                }
            },
            "Direction": {
                "description": "The direction of an activity.",
                "type": "string",
                "example": "out",
                "enum": ["in","out","self"]
            },
            "Tag": {
                "description": "A tag used to categorize activities.",
                "type": "string",
                "example": "transaction",
                "enum": ["collectible","exchange","metaverse","rss","social","transaction","unknown"]
            },
            "Type": {
                "description": "The type of activity.",
                "type": "string",
                "example": "transfer",
                "enum": ["approval","bridge","burn","comment","delete","feed","liquidity","mint","post","profile","proxy","revise","reward","share","staking","swap","trade","transfer","unknown"]
            },
            "Network": {
                "description": "The network on which activities occur.",
                "type": "string",
                "example": "ethereum",
                "enum": ["arbitrum","arweave","avax","base","binance-smart-chain","crossbell","ethereum","farcaster","gnosis","linea","optimism","polygon","vsl"]
            },
            "Platform": {
                "description": "The platform on which activities occur.",
                "type": "string",
                "enum": ["1inch","AAVE","Aavegotchi","Crossbell","Curve","ENS","Farcaster","Highlight","IQWiki","KiwiStand","Lens","Lido","LooksRare","Matters","Mirror","OpenSea","Optimism","Paragraph","RSS3","SAVM","Stargate","Uniswap","Unknown","VSL"]
            },
            "Fee": {
                "description": "Represents fee information for an activity.",
                "properties": {
                    "address": {
                        "description": "The address to which the fee is paid.",
                        "type": "string"
                    },
                    "amount": {
                        "description": "The amount of the fee.",
                        "type": "string"
                    },
                    "decimal": {
                        "description": "The decimal precision of the fee amount.",
                        "type": "integer"
                    }
                },
                "type": "object",
                "example": {
                    "amount": "315699955320960",
                    "decimal": 18
                }
            },
            "MetaCursor": {
                "description": "Metadata for paginated responses.",
                "properties": {
                    "cursor": {
                        "description": "The cursor for the next set of results.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MetaTotalPages": {
                "description": "Metadata indicating the total number of pages.",
                "properties": {
                    "totalPages": {
                        "description": "The total number of pages available.",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "BridgeTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "0x2af31b2a2708d5c9074074c578d3c521bd4385875e500f274fce52d3074460aa"
                    },
                    "sender": {
                        "type": "string",
                        "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    },
                    "receiver": {
                        "type": "string",
                        "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    },
                    "token": {
                        "type": "object",
                        "properties": {
                            "address": {
                                "type": "object",
                                "properties": {
                                    "l1": {
                                        "type": "string",
                                        "example": "0xc98d64da73a6616c42117b582e832812e7b8d57f"
                                    },
                                    "l2": {
                                        "type": "string",
                                        "example": "0x4200000000000000000000000000000000000042"
                                    }
                                }
                            },
                            "value": {
                                "type": "string",
                                "example": "10000000000000000000000"
                            }
                        }
                    },
                    "event": {
                        "properties": {
                            "deposit": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "initialized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "finalized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "withdraw": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "initialized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "proved": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "finalized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StakeTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "0xcb4038576ed46c3913915435c7ccb7316cf83c626dfcf580d0b84b86702e76eb"
                    },
                    "staker": {
                        "type": "string",
                        "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
                    },
                    "node": {
                        "type": "string",
                        "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    },
                    "value": {
                        "type": "string",
                        "example": "5000000000000000000000"
                    },
                    "chips": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/Chip"
                        }
                    },
                    "event": {
                        "properties": {
                            "deposit": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "requested": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "claimed": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "withdraw": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "deposited": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "stake": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "staked": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "unstake": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "requested": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "claimed": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TransactionEvent": {
                "type": "object",
                "nullable": true,
                "properties": {
                    "block": {
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "example": {
                    "block": {
                        "hash": "0x200b26e118e51f23d052ef3aa92bc411dbd0a6ce811f511adb9f6049dc938614",
                        "number": 726419,
                        "timestamp": 1708337158
                    },
                    "transaction": {
                        "hash": "0x6595192f1193c2584c28e7d4b50b9208242bf9b4538933f0081d3f4625373d2f",
                        "index": 1
                    }
                }
            },
            "StakeStaking": {
                "type": "object",
                "properties": {
                    "staker": {
                        "type": "string",
                        "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    },
                    "node": {
                        "type": "string",
                        "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    },
                    "chips": {
                        "type": "object",
                        "properties": {
                            "total": {
                                "type": "integer"
                            },
                            "showcase": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Chip"
                                }
                            }
                        }
                    }
                }
            },
            "Chip": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1690
                    },
                    "node": {
                        "type": "string",
                        "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    },
                    "owner": {
                        "type": "string",
                        "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "Open Chips #1690"
                            },
                            "description": {
                                "type": "string",
                                "example": "Chip Monsters are unique creatures living in the RSS3 Network, each one special because of where it was born. They represent the idea of FREE and OPEN INFORMATION, thriving in a world that values sharing and being different. These Chip Monsters are more than just digital; they symbolize the excitement and importance of being unique in a connected digital world."
                            },
                            "image": {
                                "type": "string",
                                "example": "https://gi.rss3.io/nta/chips/1690/image.svg"
                            }
                        }
                    },
                    "value": {
                        "type": "string",
                        "description": "the value at time of minting",
                        "example": "500000000000000000000"
                    },
                    "latest_value": {
                        "type": "string",
                        "description": "The latest value of the chip",
                        "example": "613891695796128425340"
                    }
                }
            },
            "Node": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "address": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "tax_rate_basis_points": {
                        "type": "integer",
                        "nullable": true
                    },
                    "is_public_good": {
                        "type": "boolean"
                    },
                    "operation_pool_tokens": {
                        "type": "string"
                    },
                    "staking_pool_tokens": {
                        "type": "string"
                    },
                    "total_shares": {
                        "type": "string"
                    },
                    "slashed_tokens": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "registered",
                            "online",
                            "offline",
                            "exited"
                        ]
                    },
                    "last_heartbeat": {
                        "type": "integer",
                        "description": "The timestamp of the last heartbeat"
                    },
                    "local": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "country": {
                                    "type": "string"
                                },
                                "region": {
                                    "type": "string"
                                },
                                "city": {
                                    "type": "string"
                                },
                                "latitude": {
                                    "type": "number"
                                },
                                "longitude": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "avatar": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "image": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        }
                    },
                    "min_tokens_to_stake": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The timestamp of the Node creation"
                    }
                },
                "example": {
                    "id": 18,
                    "address": "0x69982e017acc0fde3d1542205089a8d3eafcd1b7",
                    "name": "Natural Selection Labs",
                    "description": "A node operated by NSL.",
                    "tax_rate_basis_points": 800,
                    "is_public_good": false,
                    "operation_pool_tokens": "724429065703690345869831",
                    "staking_pool_tokens": "20798363499373370863570687",
                    "total_shares": "17339500000000000000000000",
                    "slashed_tokens": "0",
                    "alpha": true,
                    "status": "online",
                    "last_heartbeat": 1718694464,
                    "location": [
                        {
                            "country": "United States",
                            "region": "",
                            "city": "",
                            "latitude": 37.751,
                            "longitude": -97.822
                        }
                    ],
                    "avatar": {
                        "name": "Node Avatar",
                        "description": "",
                        "image": "https://gi.rss3.io/nta/nodes/0x69982E017Acc0FDE3d1542205089A8d3EAfcD1B7/avatar.svg"
                    },
                    "min_tokens_to_stake": "599739424417467944968",
                    "apy": "0.3928765550642588002426864199264",
                    "active_score": "0.2712648142772680586868915",
                    "reliability_score": "0",
                    "type": "alpha",
                    "created_at": 1710278898
                }
            },
            "NodeEvent": {
                "type": "object",
                "properties": {
                    "address_from": {
                        "type": "string"
                    },
                    "address_to": {
                        "type": "string"
                    },
                    "node_id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "node_created",
                            "node_updated",
                            "node_updated_to_public_good"
                        ]
                    },
                    "log_index": {
                        "type": "integer"
                    },
                    "chain_id": {
                        "type": "integer"
                    },
                    "block": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "node_created": {
                                "type": "object",
                                "properties": {
                                    "node_id": {
                                        "type": "integer"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "tax_rate_basis_points": {
                                        "type": "integer"
                                    },
                                    "is_public_good": {
                                        "type": "boolean"
                                    }
                                }
                            },
                            "node_updated": {
                                "type": "object",
                                "properties": {
                                    "address": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                }
                            },
                            "node_updated_to_public_good": {
                                "type": "object",
                                "properties": {
                                    "address": {
                                        "type": "string"
                                    },
                                    "is_public_good": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "example": {
                    "transaction": {
                        "hash": "0x84c045a41d6fb83a94f4f2096863faced7c5799bcd382bec49333d017f744c41",
                        "index": 1
                    },
                    "block": {
                        "hash": "0x0e9f8868b1fd7aa28183292d198b4375263fbc38541d51efd90aec1de7e4b5bc",
                        "number": 210189,
                        "timestamp": 1710278897
                    },
                    "address_from": "0x69982e017acc0fde3d1542205089a8d3eafcd1b7",
                    "address_to": "0x28f14d917fddba0c1f2923c406952478dfda5578",
                    "node_id": 18,
                    "type": "nodeCreated",
                    "log_index": 0,
                    "chain_id": 12553,
                    "metadata": {}
                }
            },
            "NodeMinTokensToStakeSnapshot": {
                "type": "object",
                "properties": {
                    "node_address": {
                        "type": "string",
                        "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    },
                    "snapshots": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "example": "2024-03-12T19:00:03Z"
                                },
                                "epoch_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "node_address": {
                                    "type": "string",
                                    "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                                },
                                "min_tokens_to_stake": {
                                    "type": "string",
                                    "example": "517704408563610773574"
                                }
                            }
                        }
                    }
                }
            },
            "StakerProfitSnapshot": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
                    },
                    "date": {
                        "type": "string",
                        "example": "2024-06-17T02:01:29Z"
                    },
                    "epoch_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "total_chip_amount": {
                        "type": "string",
                        "example": "24"
                    },
                    "total_chip_value": {
                        "type": "string",
                        "example": "14459771035071565497880"
                    }
                }
            },
            "ChipPNL": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "example": "2024-06-14T01:57:07Z"
                    },
                    "total_chip_amount": {
                        "type": "string",
                        "example": "24"
                    },
                    "total_chip_value": {
                        "type": "string",
                        "example": "14459771035071565497880"
                    },
                    "profit_and_loss": {
                        "type": "string",
                        "example": "0.0066375630868202"
                    }
                }
            },
            "OperationProfit": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "example": "2024-03-13T00:08:38+08:00"
                    },
                    "epoch_id": {
                        "type": "integer"
                    },
                    "operation_pool": {
                        "type": "string"
                    }
                }
            },
            "OperationProfitPNL": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "example": "2024-06-17T20:02:35Z"
                    },
                    "operation_pool": {
                        "type": "string",
                        "example": "724429065703690345869831"
                    },
                    "profit_and_loss": {
                        "type": "string",
                        "example": "0"
                    }
                }
            },
            "BriefEpoch": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "start_timestamp": {
                        "type": "integer"
                    },
                    "end_timestamp": {
                        "type": "integer"
                    },
                    "total_operation_rewards": {
                        "type": "string"
                    },
                    "total_staking_rewards": {
                        "type": "string"
                    },
                    "total_request_counts": {
                        "type": "string"
                    },
                    "total_reward_items": {
                        "type": "integer"
                    },
                    "distributions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BriefEpochDistribution"
                        }
                    }
                },
                "example": {
                    "id": 130,
                    "start_timestamp": 1718589689,
                    "end_timestamp": 1718654555,
                    "total_operation_rewards": "0",
                    "total_staking_rewards": "61084916609459274004676",
                    "total_request_counts": "40",
                    "total_rewarded_nodes": 65,
                    "distributions": [
                        {
                            "id": 130,
                            "start_timestamp": 1718589689,
                            "end_timestamp": 1718654555,
                            "transaction": {
                                "hash": "0xe804d536d996d49b0ec8627361bc642f92d440e6b519e6faab0944f70bf05fd2",
                                "index": 1
                            },
                            "block": {
                                "hash": "0xd9e2a4df54a385507a302ec3c62d3b3833ce8ed80242694d79cfa5b034840379",
                                "number": 4398018,
                                "timestamp": 1718654555
                            },
                            "total_operation_rewards": "0",
                            "total_staking_rewards": "61084916609459274004676",
                            "total_request_counts": "40",
                            "total_rewarded_nodes": 65,
                            "rewarded_nodes": [
                                {
                                    "epoch_id": 130,
                                    "index": 48,
                                    "transaction_hash": "0xe804d536d996d49b0ec8627361bc642f92d440e6b519e6faab0944f70bf05fd2",
                                    "node_address": "0x69982e017acc0fde3d1542205089a8d3eafcd1b7",
                                    "operation_rewards": "0",
                                    "staking_rewards": "18250125229171339678441",
                                    "tax_collected": "1270138765073564056898",
                                    "request_count": "0"
                                }
                            ]
                        }
]
                }
            },
            "Epoch": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 130
                    },
                    "start_timestamp": {
                        "type": "integer",
                        "example": 1718589689
                    },
                    "end_timestamp": {
                        "type": "integer",
                        "example": 1718654555
                    },
                    "total_operation_rewards": {
                        "type": "string",
                        "example": "0"
                    },
                    "total_staking_rewards": {
                        "type": "string",
                        "example": "61084916609459274004676"
                    },
                    "total_request_counts": {
                        "type": "string",
                        "example": "40"
                    },
                    "total_reward_items": {
                        "type": "integer",
                        "example": 65
                    },
                    "distributions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EpochDistribution"
                        }
                    }
                }
            },
            "BriefEpochDistribution": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "start_timestamp": {
                        "type": "integer"
                    },
                    "end_timestamp": {
                        "type": "integer"
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    },
                    "block": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "total_operation_rewards": {
                        "type": "string"
                    },
                    "total_staking_rewards": {
                        "type": "string"
                    },
                    "total_request_counts": {
                        "type": "string"
                    },
                    "total_reward_items": {
                        "type": "integer"
                    }
                }
            },
            "EpochDistribution": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "start_timestamp": {
                        "type": "integer"
                    },
                    "end_timestamp": {
                        "type": "integer"
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    },
                    "block": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "total_operation_rewards": {
                        "type": "string"
                    },
                    "total_staking_rewards": {
                        "type": "string"
                    },
                    "total_request_counts": {
                        "type": "string"
                    },
                    "total_reward_items": {
                        "type": "integer"
                    },
                    "reward_items": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "epoch_id": {
                                    "type": "integer"
                                },
                                "index": {
                                    "type": "integer"
                                },
                                "transaction_hash": {
                                    "type": "string"
                                },
                                "node_address": {
                                    "type": "string"
                                },
                                "operation_rewards": {
                                    "type": "string"
                                },
                                "staking_rewards": {
                                    "type": "string"
                                },
                                "tax_collected": {
                                    "type": "string"
                                },
                                "request_counts": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "example": {
                    "id": 130,
                    "start_timestamp": 1718589689,
                    "end_timestamp": 1718654555,
                    "transaction": {
                        "hash": "0xe804d536d996d49b0ec8627361bc642f92d440e6b519e6faab0944f70bf05fd2",
                        "index": 1
                    },
                    "block": {
                        "hash": "0xd9e2a4df54a385507a302ec3c62d3b3833ce8ed80242694d79cfa5b034840379",
                        "number": 4398018,
                        "timestamp": 1718654555
                    },
                    "total_operation_rewards": "0",
                    "total_staking_rewards": "61084916609459274004676",
                    "total_request_counts": "40",
                    "total_rewarded_nodes": 65,
                    "rewarded_nodes": [
                        {
                            "epoch_id": 130,
                            "index": 48,
                            "transaction_hash": "0xe804d536d996d49b0ec8627361bc642f92d440e6b519e6faab0944f70bf05fd2",
                            "node_address": "0x69982e017acc0fde3d1542205089a8d3eafcd1b7",
                            "operation_rewards": "0",
                            "staking_rewards": "18250125229171339678441",
                            "tax_collected": "1270138765073564056898",
                            "request_count": "0"
                        }
                    ]
                }
            },
            "WorkerDetail": {
                "type": "object",
                "properties": {
                    "is_required": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "NetworkWorker": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "network": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "worker": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "endpoint": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "concurrent_block_requests": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            },
                            "block_batch_size": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            },
                            "receipts_batch_size": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            },
                            "block_receipts_batch_size": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            }
                        }
                    }
                },
                "example": {
                    "id": {
                        "is_required": true,
                        "type": "string",
                        "value": null,
                        "description": "Worker's id, must be unique, for example '[network]-[worker]'"
                    },
                    "network": {
                        "is_required": true,
                        "type": "string",
                        "value": "ethereum",
                        "description": "The network where the worker operates on"
                    },
                    "worker": {
                        "is_required": true,
                        "type": "string",
                        "value": "core",
                        "description": "Name of the worker"
                    },
                    "endpoint": {
                        "is_required": true,
                        "type": "url",
                        "value": null,
                        "description": "An external endpoint to fetch data from, for example, a blockchain RPC endpoint or a Farcaster api"
                    },
                    "parameters": {
                        "concurrent_block_requests": {
                            "is_required": false,
                            "type": "uint",
                            "value": 8,
                            "description": "The number of concurrent RPC requests to the blockchain rpc. Default: 8"
                        },
                        "block_batch_size": {
                            "is_required": false,
                            "type": "uint",
                            "value": 8,
                            "description": "The number of blocks to fetch in a single RPC request. Default: 8"
                        },
                        "receipts_batch_size": {
                            "is_required": false,
                            "type": "uint",
                            "value": 200,
                            "description": "The number of receipts to fetch in a single RPC request. Default: 200"
                        },
                        "block_receipts_batch_size": {
                            "is_required": false,
                            "type": "uint",
                            "value": 8,
                            "description": "The number of blocks to fetch receipts in a single RPC request. Default: 8"
                        }
                    },
                    "minimum_resource": {
                        "cpu_core": 2,
                        "memory_in_gb": 2,
                        "disk_space_in_gb": 153
                    }
                }
            },
            "EpochAPYSnapshot": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "example": "2024-06-17T20:02:35Z"
                    },
                    "epoch_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apy": {
                        "type": "string",
                        "example": "0.1"
                    }
                }
            },
            "Image": {
                "type": "string",
                "description": "SVG image data of the chip.",
                "example": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;background-color:black;\" xml:space=\"preserve\">\n    <style type=\"text/css\">.f{fill:#FB1467;}.c{fill:#1477FB;}.b{fill:#DEE5D9;}.h{fill:#DEE5D9;}.alpha{fill:#1477FB;}.pg{fill:#FB1467;}.e{fill-rule:evenodd;clip-rule:evenodd;}</style>\n    <path class=\"f\" d=\"M16 88h68v2H16zm0 4h4v2h-4zm6 0h2v2h-2zm4 0h6v2h-6zm12 0h6v2h-6zm8 0h3v2h-3zm5 0h3v2h-3zm-17 0h2v2h-2zm22 0h6v2h-6zm8 0h2v2h-2zm4 0h6v2h-6zm12 0h4v2h-4zm-4 0h2v2h-2zM16 10h68v2H16zm0-4h4v2h-4zm6 0h2v2h-2zm4 0h6v2h-6zm12 0h6v2h-6zm8 0h3v2h-3zm5 0h3v2h-3zM34 6h2v2h-2zm22 0h6v2h-6zm8 0h2v2h-2zm4 0h6v2h-6zm12 0h4v2h-4zm-4 0h2v2h-2zM12 16v68h-2V16zM6 84v-4h2v4zm0-6v-2h2v2zm0-4v-6h2v6zm0-12v-6h2v6zm0-8v-3h2v3zm0-5v-3h2v3zm0 17v-2h2v2zm0-22v-6h2v6zm0-8v-2h2v2zm0-4v-6h2v6zm0-12v-4h2v4zm0 4v-2h2v2zm84-8v68h-2V16zm2 68v-4h2v4zm0-6v-2h2v2zm0-4v-6h2v6zm0-12v-6h2v6zm0-8v-3h2v3zm0-5v-3h2v3zm0 17v-2h2v2zm0-22v-6h2v6zm0-8v-2h2v2zm0-4v-6h2v6zm0-12v-4h2v4zm0 4v-2h2v2z\"/>\n    <svg class=\"c\">\n      <path d=\"M52 80h2v6h-2zm4 0h2v6h-2z\"/>\n      <path d=\"M58 84v2h-6v-2zm0-4v2h-6v-2zm10 0h2v6h-2zm4 0h2v6h-2z\"/>\n      <path d=\"M74 84v2h-6v-2zm0-4v2h-6v-2zm6-12h2v6h-2zm4 0h2v6h-2z\"/>\n      <path d=\"M86 72v2h-6v-2zm0-4v2h-6v-2zm-6 12h2v6h-2zm4 0h2v6h-2z\"/>\n      <path d=\"M86 84v2h-6v-2zm0-4v2h-6v-2zm-6-28h6v6h-6zM54 86h2v2h-2zm4-2v-2h10v2zm16-6h2v2h-2zm-24 4h2v2h-2zm26-6h2v2h-2zm2-2h2v2h-2zm-4 8h6v2h-6zm6-40h6v6h-6zm4 32v6h-2v-6zm0-16v10h-2V58zm0-26v10h-2V32zm-2 16h2v4h-2zM52 20h2v-6h-2zm4 0h2v-6h-2z\"/>\n      <path d=\"M58 16v-2h-6v2zm0 4v-2h-6v2zm10 0h2v-6h-2zm4 0h2v-6h-2z\"/>\n      <path d=\"M74 16v-2h-6v2zm0 4v-2h-6v2zm6 12h2v-6h-2zm4 0h2v-6h-2z\"/>\n      <path d=\"M86 28v-2h-6v2zm0 4v-2h-6v2zm-6-12h2v-6h-2zm4 0h2v-6h-2z\"/>\n      <path d=\"M86 16v-2h-6v2zm0 4v-2h-6v2zm-32-6h2v-2h-2zm4 2v2h10v-2zm16 6h2v-2h-2zm-24-4h2v-2h-2zm26 6h2v-2h-2zm2 2h2v-2h-2zm-4-8h6v-2h-6zm10 8v-6h-2v6zm-36-6h-2v-6h2zm-4 0h-2v-6h2z\"/>\n      <path d=\"M42 16v-2h6v2zm0 4v-2h6v2zm-10 0h-2v-6h2zm-4 0h-2v-6h2z\"/>\n      <path d=\"M26 16v-2h6v2zm0 4v-2h6v2zm-6 12h-2v-6h2zm-4 0h-2v-6h2z\"/>\n      <path d=\"M14 28v-2h6v2zm0 4v-2h6v2zm6-12h-2v-6h2zm-4 0h-2v-6h2z\"/>\n      <path d=\"M14 16v-2h6v2zm0 4v-2h6v2zm6 28h-6v-6h6zm26-34h-2v-2h2zm-4 2v2H32v-2zm-16 6h-2v-2h2zm24-4h-2v-2h2zm-26 6h-2v-2h2zm-2 2h-2v-2h2zm4-8h-6v-2h6zm-6 40h-6v-6h6zm-4-32v-6h2v6zm0 16V32h2v10zm0 26V58h2v10zm2-16h-2v-4h2zm30 28h-2v6h2zm-4 0h-2v6h2z\"/>\n      <path d=\"M42 84v2h6v-2zm0-4v2h6v-2zm-10 0h-2v6h2zm-4 0h-2v6h2z\"/>\n      <path d=\"M26 84v2h6v-2zm0-4v2h6v-2zm-6-12h-2v6h2zm-4 0h-2v6h2z\"/>\n      <path d=\"M14 72v2h6v-2zm0-4v2h6v-2zm6 12h-2v6h2zm-4 0h-2v6h2z\"/>\n      <path d=\"M14 84v2h6v-2zm0-4v2h6v-2zm32 6h-2v2h2zm-4-2v-2H32v2zm-16-6h-2v2h2zm24 4h-2v2h2zm-26-6h-2v2h2zm-2-2h-2v2h2zm4 8h-6v2h6zm-10-8v6h2v-6z\"/>\n    </svg>\n    <path class=\"alpha\" d=\"M6 6V4h4v2zm4 0v2H6V6H4v6h2v-2h4v2h2V6zm84-2v2h-4V4zm0 2v2h-4V6h-2v6h2v-2h4v2h2V6zM10 88v2H6v-2zm0 2v2H6v-2H4v6h2v-2h4v2h2v-6zm84-2v2h-4v-2zm0 2v2h-4v-2h-2v6h2v-2h4v2h2v-6z\"/>\n    <polygon class=\"b\" points=\"72,46 72,64 70,64 70,66 68,66 68,68 66,68 66,70 64,70 64,72 36,72 36,70 34,70 34,68 32,68 32,66   30,66 30,64 28,64 28,46 30,46 30,44 70,44 70,46 \"/>\n    <path d=\"M36 50h2v2h-2zm2 2h2v2h-2zm2 2h2v2h-2zm-4 0h2v2h-2zm4-4h2v2h-2zm18 0h2v2h-2zm2 2h2v2h-2zm2 2h2v2h-2zm-4 0h2v2h-2zm4-4h2v2h-2zm-14 6h4v2h-4zm-2-2h2v2h-2zm6 0h2v2h-2z\" fill=\"#000\"/>\n    <path d=\"M40 62h2v2h-2zM42 64h2v2h-2zM42 62h2v2h-2zM44 64h2v2h-2z\" fill=\"#000\"/>\n    <path d=\"M44 64h16v4H44z\" fill=\"#000\"/>\n    <path class=\"h\" d=\"M28 40h44v2H28z\"/>\n    <path class=\"h e\" d=\"M40 33v-3h-2v-2h-2v2h-2v2h-2v2h-2v2h-2v2h5v-2h2v2h5v-3h-4v-2z\"/>\n    <path class=\"h e\" d=\"M42 24v2h-4v2h4v2h5v2h-5v6h7V24zm5 4h-2v-2h2zm23 8v-2h-2v-2h-2v-2h-2v-2h-2v2h-2v3h4v2h-6v-3h-3v6h10v-2h2v2h5v-2z\"/>\n    <path class=\"h e\" d=\"M58 26v-2h-7v14h2v-8h5v-2h4v-2zm-3 2h-2v-2h2z\"/>\n  </svg>"
            },
            "ResponseError": {
                "type": "object",
                "properties": {
                    "error_code": {
                        "type": "string",
                        "enum": ["bad_request","validate_failed","bad_params","internal_error"]
                    },
                    "error": {
                        "type": "string"
                    },
                    "details": {
                        "type": "string"
                    }
                }
            },
            "CountSnapshot": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "example": "2024-03-10"
                    },
                    "count": {
                        "type": "integer",
                        "example": 1
                    }
                }
            }
        },
        "parameters": {
            "activity_id_path": {
                "description": "Retrieve details for the specified activity ID",
                "example": "0x840e42d573ebe1ff27a9e4914573b4e0518fcd685c7f9331d319abe854f780e3",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "activity_id_query": {
                "description": "Retrieve details for the specified activity ID",
                "example": "0x000000000000000000000000113f4b4c3765e5f05fd197c5c35b8a8a9b34245b",
                "in": "query",
                "name": "id",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "action_limit_query": {
                "description": "Specify the number of actions within the activity to retrieve",
                "example": "10",
                "in": "query",
                "name": "action_limit",
                "required": false,
                "schema": {
                    "default": 10,
                    "maximum": 20,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "action_page_query": {
                "description": "Specify the pagination for actions",
                "example": 1,
                "in": "query",
                "name": "action_page",
                "required": false,
                "schema": {
                    "default": 1,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "account_path": {
                "name": "account",
                "in": "path",
                "description": "Retrieve activities from the specified account. This account is a unique identifier within the decentralized system.",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
            },
            "limit_query": {
                "name": "limit",
                "in": "query",
                "description": "Specify the number of activities to retrieve. By default, this is set to 100, and the maximum allowed value is 100.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 100
                },
                "example": 20
            },
            "cursor_query": {
                "name": "cursor",
                "in": "query",
                "description": "Specify the cursor used for pagination. This helps in retrieving the next set of results in a paginated response.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "since_timestamp_query": {
                "name": "since_timestamp",
                "in": "query",
                "description": "Retrieve activities starting from this timestamp. The timestamp is specified in Unix epoch time.",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "until_timestamp_query": {
                "name": "until_timestamp",
                "in": "query",
                "description": "Retrieve activities up to this timestamp. The timestamp is specified in Unix epoch time.",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "success_query": {
                "name": "success",
                "in": "query",
                "description": "Retrieve activities based on success status. Specify true for successful activities or false for unsuccessful ones.",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "direction_query": {
                "name": "direction",
                "in": "query",
                "description": "Retrieve activities based on direction. The direction specifies whether the activity is incoming or outgoing.",
                "required": false,
                "schema": {
                    "$ref": "#/components/schemas/Direction"
                }
            },
            "network_query": {
                "name": "network",
                "in": "query",
                "description": "Retrieve activities from the specified network(s). You can specify one or more networks.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Network"
                    }
                }
            },
            "network_name_path": {
                "name": "network_name",
                "in": "path",
                "required": true,
                "description": "The name of the network to retrieve available workers for.",
                "schema": {
                    "$ref": "#/components/schemas/Network"
                }
            },
            "worker_name_path": {
                "name": "worker_name",
                "in": "path",
                "required": true,
                "description": "The name of the worker.",
                "schema": {
                    "type": "string"
                },
                "example": "core"
            },
            "action_tag_query": {
                "name": "tag",
                "in": "query",
                "description": "Retrieve activities from the specified tag(s). Tags can be used to categorize activities.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Tag"
                    }
                }
            },
            "action_type_query": {
                "name": "type",
                "in": "query",
                "description": "Retrieve activities from the specified type(s). Types can help filter activities based on their nature or category.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Type"
                    }
                }
            },
            "platform_query": {
                "name": "platform",
                "in": "query",
                "description": "Retrieve activities from the specified platform(s). Platforms refer to the systems or environments where the activities occurred.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Platform"
                    }
                }
            },
            "rss_path": {
                "description": "Retrieve details for the specified RSS path",
                "example": "abc",
                "in": "path",
                "name": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "sender_query": {
                "name": "sender",
                "in": "query",
                "required": false,
                "description": "Sender address",
                "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1",
                "schema": {
                    "type": "string"
                }
            },
            "receiver_query": {
                "name": "receiver",
                "in": "query",
                "required": false,
                "description": "Receiver address",
                "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1",
                "schema": {
                    "type": "string"
                }
            },
            "address_query": {
                "name": "address",
                "in": "query",
                "required": false,
                "description": "Address involved in the transaction",
                "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1",
                "schema": {
                    "type": "string"
                }
            },
            "bridging_type_query": {
                "name": "type",
                "in": "query",
                "required": false,
                "description": "Type of bridging transaction",
                "schema": {
                    "type": "string",
                    "enum": [
                        "deposit",
                        "withdraw"
                    ]
                }
            },
            "limit_1_20": {
                "name": "limit",
                "in": "query",
                "description": "Limit the number of results",
                "example": 20,
                "schema": {
                    "type": "integer",
                    "default": 20
                }
            },
            "bridging_transaction_hash_path": {
                "name": "transaction_hash",
                "in": "path",
                "required": true,
                "description": "The unique hash of the bridging transaction",
                "example": "0x2af31b2a2708d5c9074074c578d3c521bd4385875e500f274fce52d3074460aa",
                "schema": {
                    "type": "string"
                }
            },
            "staking_transaction_hash_path": {
                "name": "transaction_hash",
                "in": "path",
                "required": true,
                "description": "The unique hash of the staking transaction",
                "example": "0xcb4038576ed46c3913915435c7ccb7316cf83c626dfcf580d0b84b86702e76eb",
                "schema": {
                    "type": "string"
                }
            },
            "epoch_transaction_hash_path": {
                "name": "transaction_hash",
                "in": "path",
                "required": true,
                "description": "The unique hash of the epoch transaction",
                "example": "0xe804d536d996d49b0ec8627361bc642f92d440e6b519e6faab0944f70bf05fd2",
                "schema": {
                    "type": "string"
                }
            },
            "staker_query": {
                "name": "staker",
                "in": "query",
                "required": false,
                "description": "Staker address",
                "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944",
                "schema": {
                    "type": "string"
                }
            },
            "staker_address_query": {
                "name": "staker_address",
                "in": "query",
                "required": false,
                "description": "Staker address",
                "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944",
                "schema": {
                    "type": "string"
                }
            },
            "node_query": {
                "name": "node",
                "in": "query",
                "required": false,
                "description": "Node address",
                "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2",
                "schema": {
                    "type": "string"
                }
            },
            "node_address_path": {
                "name": "address",
                "in": "path",
                "required": true,
                "description": "The address of the node to retrieve.",
                "schema": {
                    "type": "string"
                },
                "example": "0x69982e017acc0fde3d1542205089a8d3eafcd1b7"
            },
            "node_address_query": {
                "name": "node_address",
                "in": "query",
                "required": false,
                "description": "Node address",
                "example": "0x69982e017acc0fde3d1542205089a8d3eafcd1b7",
                "schema": {
                    "type": "string"
                }
            },
            "staking_type_query": {
                "name": "type",
                "in": "query",
                "required": false,
                "description": "Type of staking transaction",
                "schema": {
                    "type": "string",
                    "enum": [
                        "deposit",
                        "withdraw",
                        "stake",
                        "unstake"
                    ]
                }
            },
            "pending_query": {
                "name": "pending",
                "in": "query",
                "required": false,
                "description": "Pending status of the transaction",
                "schema": {
                    "type": "boolean"
                }
            },
            "staker_address_path": {
                "name": "staker_address",
                "in": "path",
                "required": true,
                "description": "The address of the staker whose profit information is to be retrieved.",
                "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944",
                "schema": {
                    "type": "string"
                }
            },
            "chip_id_path": {
                "name": "chip_id",
                "in": "path",
                "required": true,
                "description": "The unique identifier of the chip to retrieve.",
                "example": 1690,
                "schema": {
                    "type": "integer"
                }
            },
            "chip_ids_query": {
                "name": "id",
                "in": "query",
                "required": false,
                "description": "Array of chip IDs to filter the results.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "example": [
                    1690
                ]
            },
            "owner_query": {
                "name": "owner",
                "in": "query",
                "required": false,
                "description": "The address of the chip owner to filter the results.",
                "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944",
                "schema": {
                    "type": "string"
                }
            },
            "before_date_query": {
                "name": "beforeDate",
                "in": "query",
                "description": "The date before which the snapshots are returned.",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            "after_date_query": {
                "name": "afterDate",
                "in": "query",
                "description": "The date after which the snapshots are returned.",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            "epoch_id_path": {
                "name": "epoch_id",
                "in": "path",
                "required": true,
                "description": "The ID of the epoch to retrieve.",
                "schema": {
                    "type": "string"
                },
                "example": 130
            }
        },
        "requestBodies": {
            "NodeMinTokensToStakeRequestBody": {
                "description": "Request payload for retrieving snapshots of the minimum staking amount for specified nodes.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "node_addresses": {
                                    "type": "array",
                                    "description": "List of node addresses to retrieve the minimum staking amount snapshots for.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                                    ]
                                },
                                "only_start_and_end": {
                                    "type": "boolean",
                                    "description": "If true, only return the start and end min_tokens_to_stake.",
                                    "example": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "responses": {
            "ActivityResponse": {
                "description": "A successful response containing the details of the specified activity. The response includes the activity ID, timestamp, and a list of actions performed within the activity.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ActivityResponse"
                        }
                    }
                }
            },
            "ActivitiesResponse": {
                "description": "A successful response with the activities from the specified account. The response includes details about each activity, such as its ID, timestamp, and associated actions.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ActivitiesResponse"
                        }
                    }
                }
            },
            "RSSActivitiesResponse": {
                "description": "A successful response with the activities from rss feed.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ActivitiesResponse"
                        },
                        "example": {}
                    }
                }
            },
            "BridgeTransactionsResponse": {
                "description": "List of bridging transactions retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BridgeTransaction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "BridgeTransactionByHashResponse": {
                "description": "Bridging transaction details fetched successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/BridgeTransaction"
                                }
                            }
                        }
                    }
                }
            },
            "StakeTransactionsResponse": {
                "description": "List of staking transactions retrieved successfully with pagination cursor",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StakeTransaction"
                                    }
                                },
                                "cursor": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "StakeTransactionByHashResponse": {
                "description": "Staking transaction details fetched successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/StakeTransaction"
                                }
                            }
                        }
                    }
                }
            },
            "StakeStakingsResponse": {
                "description": "A successful response containing a list of stakers and their associated nodes. Each entry in the data array represents a staker and includes detailed information about the staker, the node they are associated with, and any associated chips. The response also includes a cursor for pagination to fetch subsequent sets of results. This allows users to retrieve large datasets incrementally.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StakeStaking"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results.",
                                    "example": "0xc7d6378960bd3374c31ce6223df0e79355ff3dc4b6dccf28afe84487321ef9fb"
                                }
                            }
                        }
                    }
                }
            },
            "StakingProfitResponse": {
                "description": "A successful response containing the staking profit information for the specified staker. The data includes the owner's address, total chip amount, total chip value, and profit and loss (PNL) data for one day, one week, and one month.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "description": "Staking profit information for the specified staker.",
                                    "properties": {
                                        "owner": {
                                            "type": "string",
                                            "description": "The address of the staker.",
                                            "example": "0x827431510a5d249ce4fdb7f00c83a3353f471848"
                                        },
                                        "total_chip_amount": {
                                            "type": "string",
                                            "description": "The total amount of chips owned by the staker.",
                                            "example": "1000"
                                        },
                                        "total_chip_value": {
                                            "type": "string",
                                            "description": "The total value of chips owned by the staker.",
                                            "example": "100000"
                                        },
                                        "oneDay": {
                                            "$ref": "#/components/schemas/ChipPNL"
                                        },
                                        "oneWeek": {
                                            "$ref": "#/components/schemas/ChipPNL"
                                        },
                                        "oneMonth": {
                                            "$ref": "#/components/schemas/ChipPNL"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ChipsResponse": {
                "description": "A successful response containing a list of chips based on the provided filters. Each chip includes detailed information such as its ID, node address, owner address, and metadata. The response also includes a cursor for pagination to fetch subsequent sets of results.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of chips matching the filter criteria.",
                                    "items": {
                                        "$ref": "#/components/schemas/Chip"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results.",
                                    "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                                }
                            }
                        }
                    }
                }
            },
            "ChipResponse": {
                "description": "A successful response containing detailed information about the specified chip. The data includes the chip's ID, node address, owner address, and metadata such as name, description, and image.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Chip"
                        }
                    }
                }
            },
            "ChipImageResponse": {
                "description": "A successful response containing the SVG image of the specified chip. The image can be used to visually represent the chip.",
                "content": {
                    "image/svg+xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Image"
                        }
                    }
                }
            },
            "NodeCountSnapshotsResponse": {
                "description": "A successful response containing snapshots of node counts over time. Each entry in the data array includes the date and the count of nodes on that date.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of node count snapshots.",
                                    "items": {
                                        "$ref": "#/components/schemas/CountSnapshot"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NodeMinTokensToStakeResponse": {
                "description": "A successful response containing snapshots of the minimum staking amount for the specified nodes. Each entry in the data array includes the node address, date, and the minimum tokens to stake on that date.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of minimum staking amount snapshots.",
                                    "items": {
                                        "$ref": "#/components/schemas/NodeMinTokensToStakeSnapshot"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StakerCountSnapshotsResponse": {
                "description": "A successful response containing snapshots of the total staker count over time. Each entry in the data array includes the date and the count of stakers on that date.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of staker count snapshots.",
                                    "items": {
                                        "$ref": "#/components/schemas/CountSnapshot"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StakerProfitSnapshotsResponse": {
                "description": "A successful response containing snapshots of the staker profit over time. Each entry in the data array includes the date and profit details. The response also includes a cursor for pagination to fetch subsequent sets of results.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of staker profit snapshots.",
                                    "items": {
                                        "$ref": "#/components/schemas/StakerProfitSnapshot"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results."
                                }
                            }
                        }
                    }
                }
            },
            "OperationProfitSnapshotsResponse": {
                "description": "A successful response containing snapshots of the operation profit over time for the specified node. Each entry in the data array includes the date and profit details. The response also includes a cursor for pagination to fetch subsequent sets of results.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of operation profit snapshots.",
                                    "items": {
                                        "$ref": "#/components/schemas/OperationProfit"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results."
                                }
                            }
                        }
                    }
                }
            },
            "EpochAPYSnapshotsResponse": {
                "description": "A successful response containing the APY for epoch snapshots. Each entry in the data array includes the epoch details and the corresponding APY.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of epoch APY snapshots.",
                                    "items": {
                                        "$ref": "#/components/schemas/EpochAPYSnapshot"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NodesResponse": {
                "description": "A successful response containing a list of nodes. Each entry includes detailed information about the node.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Node"
                            }
                        }
                    }
                }
            },
            "NodeResponse": {
                "description": "A successful response containing detailed information about the specified node.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Node"
                        }
                    }
                }
            },
            "NodeAvatarResponse": {
                "description": "A successful response containing the SVG image of the specified node. The image can be used to visually represent the node.",
                "content": {
                    "image/svg+xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Image"
                        }
                    }
                }
            },
            "NodeEventsResponse": {
                "description": "A successful response containing transaction events for the specified node. Each entry in the data array includes detailed information about the event.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of node transaction events.",
                                    "items": {
                                        "$ref": "#/components/schemas/NodeEvent"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results."
                                }
                            }
                        }
                    }
                }
            },
            "NodeOperationProfitResponse": {
                "description": "A successful response containing detailed information about the operation profit of the specified node. Each entry includes address, operation pool, and PNL details for different time periods.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "description": "Operation profit details for the node.",
                                    "properties": {
                                        "node_address": {
                                            "type": "string",
                                            "description": "The address of the node.",
                                            "example": "0x69982e017acc0fde3d1542205089a8d3eafcd1b7"
                                        },
                                        "operation_pool": {
                                            "type": "string",
                                            "description": "The operation pool of the node.",
                                            "example": "724429065703690345869831"
                                        },
                                        "oneDay": {
                                            "$ref": "#/components/schemas/OperationProfitPNL"
                                        },
                                        "oneWeek": {
                                            "$ref": "#/components/schemas/OperationProfitPNL"
                                        },
                                        "oneMonth": {
                                            "$ref": "#/components/schemas/OperationProfitPNL"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "EpochsResponse": {
                "description": "A successful response containing a list of epochs. Each entry in the data array includes brief information about the epoch.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of epochs.",
                                    "items": {
                                        "$ref": "#/components/schemas/BriefEpoch"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results."
                                }
                            }
                        }
                    }
                }
            },
            "EpochResponse": {
                "description": "A successful response containing detailed information about the specified epoch.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Epoch"
                        },
                        "example": {
                            "epoch_id": "1",
                            "start_time": "2024-01-01T00:00:00Z",
                            "end_time": "2024-01-07T00:00:00Z",
                            "total_staked": "1000000",
                            "rewards": "5000"
                        }
                    }
                }
            },
            "EpochTransactionResponse": {
                "description": "A successful response containing details of the specified epoch transaction.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of epoch distribution details.",
                                    "items": {
                                        "$ref": "#/components/schemas/EpochDistribution"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NodeRewardsByEpochResponse": {
                "description": "A successful response containing the rewards of the specified node by epoch. Each entry in the data array includes detailed information about the epoch.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of epochs with node rewards.",
                                    "items": {
                                        "$ref": "#/components/schemas/Epoch"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results."
                                }
                            }
                        }
                    }
                }
            },
            "EpochsAverageAPYResponse": {
                "description": "A successful response containing the average APY for all epochs.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string",
                                    "description": "The average APY of all epochs.",
                                    "example": "1.4665029316918649354"
                                }
                            }
                        }
                    }
                }
            },
            "NetworksResponse": {
                "description": "A successful response containing a list of compatible networks.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of compatible network names.",
                                    "items": {
                                        "$ref": "#/components/schemas/Network"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NetworkWorkersResponse": {
                "description": "A successful response containing a list of available workers for the specified network.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of worker names for the specified network.",
                                    "items": {
                                        "type": "string",
                                        "example": "core"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NetworkWorkerConfigResponse": {
                "description": "A successful response containing the configuration details for the specified worker in the specified network.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                   "$ref": "#/components/schemas/NetworkWorker"
                                }
                            }
                        }
                    }
                }
            },
            "400": {
                "description": "The request was invalid or malformed.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ResponseError"
                        },
                        "examples": {
                            "bad_request": {
                                "value": {
                                    "error_code": "bad_request",
                                    "error": "Invalid request. Please check your input and try again."
                                }
                            },
                            "validate_failed": {
                                "value": {
                                    "error_code": "validate_failed",
                                    "error": "Validation failed. Ensure all fields meet the required criteria and try again."
                                }
                            },
                            "bad_params": {
                                "value": {
                                    "error_code": "bad_params",
                                    "error": "Invalid parameter combination. Verify the combination and try again."
                                }
                            }
                        }
                    }
                }
            },
            "500": {
                "description": "An internal server error occurred while processing the request.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ResponseError"
                        },
                        "example": {
                            "error_code": "internal_error",
                            "error": "An internal error has occurred, please try again later."
                        }
                    }
                }
            }
        }
    }
}
