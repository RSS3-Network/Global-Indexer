{
    "openapi": "3.0.3",
    "info": {
        "title": "Global Indexer API",
        "description": "An RSS3 Global Indexer (GI), is responsible for facilitating coordination among RSS3 Nodes, engaging with the VSL and performing critical functions such as Network Rewards calculation and slashing enforcement. Global Indexer API provides RSS3 Node data query (DSL) and network transparency (NTA) functions.",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://gi.rss3.io",
            "description": "Production"
        },
        {
            "url": "https://gi.rss3.dev",
            "description": "Development"
        },
        {
            "url": "http://localhost",
            "description": "Localhost"
        }
    ],
    "tags": [
        {
            "name": "DSL",
            "description": "The DSL API is an interface to interact with RSS3 Nodes and, therefore, the entire decentralized DSL."
        },
        {
            "name": "NTA",
            "description": "The Network Transparency API (NTA) is a set of APIs that provide transparency and visibility into the network. It allows users to query and retrieve information about the network. Learn more: https://forum.rss3.io/t/rss3-network-transparency-api/113"
        },
        {
            "name": "Decentralized",
            "description": "A subset of DSL, these APIs facilitate querying information on decentralized networks."
        },
        {
            "name": "RSS",
            "description": "A subset of DSL, these APIs facilitate querying information conforming to the RSS Specification."
        },
        {
            "name": "Node",
            "description": "A subset of NTA, these APIs provide information about nodes in the RSS3 network."
        },
        {
            "name": "Epoch",
            "description": "A subset of NTA, these APIs provide information on each Epoch in the VSL."
        },
        {
            "name": "Stake",
            "description": "A subset of NTA, these APIs provide information on Stake transactions in the VSL."
        },
        {
            "name": "Chips",
            "description": "A subset of NTA, these APIs provide information and transaction queries related to Chips in the VSL."
        },
        {
            "name": "Bridge",
            "description": "A subset of NTA, these APIs provide querying cross-chain bridge transactions in the VSL."
        },
        {
            "name": "Networks",
            "description": "A subset of NTA, these APIs provide information about the open information networks indexed by the RSS3 network."
        },
        {
            "name": "Snapshots",
            "description": "A subset of NTA, these APIs provide snapshots of various data within the RSS3 network."
        }
    ],
    "paths": {
        "/decentralized/tx/{id}": {
            "get": {
                "summary": "Get Activity by ID",
                "description": "This endpoint retrieves the details of a specified decentralized transaction activity by its ID. You can also specify additional query parameters to limit the number of actions retrieved and to paginate through actions.",
                "tags": [
                    "Decentralized",
                    "DSL"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/activity_id_path"
                    },
                    {
                        "$ref": "#/components/parameters/action_limit_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_page_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ActivityResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/decentralized/{account}": {
            "get": {
                "summary": "Get Account Activities",
                "description": "This endpoint retrieves the activities associated with a specified account in the decentralized system. You can use various query parameters to filter and paginate the results, including limits on the number of activities and actions, timestamps, success status, direction, and more.",
                "tags": [
                    "Decentralized",
                    "DSL"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/account_path"
                    },
                    {
                        "$ref": "#/components/parameters/limit_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_limit_query"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/since_timestamp_query"
                    },
                    {
                        "$ref": "#/components/parameters/until_timestamp_query"
                    },
                    {
                        "$ref": "#/components/parameters/success_query"
                    },
                    {
                        "$ref": "#/components/parameters/direction_query"
                    },
                    {
                        "$ref": "#/components/parameters/network_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_tag_query"
                    },
                    {
                        "$ref": "#/components/parameters/action_type_query"
                    },
                    {
                        "$ref": "#/components/parameters/platform_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ActivitiesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                }
            }
        },
        "/rss/{path}": {
            "get": {
                "summary": "Get RSS Activity by Path",
                "tags": [
                    "RSS",
                    "DSL"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/rss_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ActivitiesResponse"
                    },
                    "400": {
                        "description": "The request is malformed or contains invalid parameters."
                    },
                    "404": {
                        "description": "The specified RSS path was not found."
                    },
                    "500": {
                        "description": "An internal server error occurred while processing the request."
                    }
                }
            }
        },
        "/nta/bridgings/transactions": {
            "get": {
                "summary": "Get bridging transactions",
                "description": "Retrieve a list of bridging transactions based on various query parameters such as cursor, sender, receiver, address, transaction type, and limit. This endpoint allows users to filter transactions to get precise data related to deposits and withdrawals. The response includes detailed transaction information, including sender and receiver addresses, token details, and associated events such as deposit initialization and finalization. Use this endpoint for monitoring, auditing, or analyzing bridging transactions. The 'cursor' parameter can be used for pagination to fetch subsequent sets of results.",
                "tags": [
                    "Bridge",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/sender_query"
                    },
                    {
                        "$ref": "#/components/parameters/receiver_query"
                    },
                    {
                        "$ref": "#/components/parameters/address_query"
                    },
                    {
                        "$ref": "#/components/parameters/bridging_type_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/BridgeTransactionsResponse"
                    }
                }
            }
        },
        "/nta/bridgings/transactions/{transaction_hash}": {
            "get": {
                "summary": "Get bridging transaction by hash",
                "description": "Retrieve detailed information of a bridging transaction by specifying the transaction hash. This endpoint provides comprehensive data about a single transaction, including sender, receiver, token details, and related events.",
                "tags": [
                    "Bridge",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bridging_transaction_hash_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/BridgeTransactionByHashResponse"
                    }
                }
            }
        },
        "/nta/stakings/transactions": {
            "get": {
                "summary": "Get staking transactions",
                "description": "Retrieve a list of staking transactions based on various query parameters such as cursor, staker, node, transaction type, pending status, and limit. This endpoint allows users to filter transactions to get precise data related to staking activities including deposits, withdrawals, stakes, and unstakes. The response includes detailed transaction information such as staker address, node address, value staked, associated chips, and related events. Use this endpoint for monitoring, auditing, or analyzing staking transactions. The 'cursor' parameter can be used for pagination to fetch subsequent sets of results.",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    },
                    {
                        "$ref": "#/components/parameters/staker_query"
                    },
                    {
                        "$ref": "#/components/parameters/node_query"
                    },
                    {
                        "$ref": "#/components/parameters/staking_type_query"
                    },
                    {
                        "$ref": "#/components/parameters/pending_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakeTransactionsResponse"
                    }
                }
            }
        },
        "/nta/stakings/transactions/{transaction_hash}": {
            "get": {
                "summary": "Get staking transaction by hash",
                "description": "Retrieve detailed information of a staking transaction by specifying the transaction hash. This endpoint provides comprehensive data about a single staking transaction, including staker address, node address, value staked, associated chips, and related events.",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/staking_transaction_hash_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakeTransactionByHashResponse"
                    }
                }
            }
        },
        "/nta/stakings/stakings": {
            "get": {
                "summary": "Get a list of stakers and Nodes",
                "description": "Retrieve a list of stakers and their associated Nodes. This endpoint allows users to filter the results by staker address, node address, and to paginate through the results using cursor and limit parameters. The response includes detailed information about each staker, node, and associated chips.",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/staker_query"
                    },
                    {
                        "$ref": "#/components/parameters/node_query"
                    },
                    {
                        "$ref": "#/components/parameters/limit_1_20"
                    },
                    {
                        "$ref": "#/components/parameters/cursor_query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakeStakingsResponse"
                    }
                }
            }
        },
        "/nta/stakings/{staker_address}/profit": {
            "get": {
                "summary": "Get staking profit of a staker",
                "description": "Retrieve the staking profit information for a specified staker. This endpoint returns detailed profit data, including the owner's address, total chip amount, total chip value, and profit and loss (PNL) data over different time periods (one day, one week, one month).",
                "tags": [
                    "Stake",
                    "NTA"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/staker_address_path"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StakingProfitResponse"
                    }
                }
            }
        },
        "/nta/chips": {
            "get": {
                "summary": "Get all chips",
                "description": "Retrieve a list of all chips. This endpoint allows users to filter the results by cursor, chip IDs, node address, owner address, and to paginate through the results using cursor and limit parameters. The response includes detailed information about each chip and a cursor for pagination to fetch subsequent sets of results.",
                "tags": [
                    "Chips",
                    "NTA"
                ],
                "parameters": [
                    { "$ref": "#/components/parameters/cursor_query" },
                    { "$ref": "#/components/parameters/chip_ids_query" },
                    { "$ref": "#/components/parameters/node_query" },
                    { "$ref": "#/components/parameters/owner_query" },
                    { "$ref": "#/components/parameters/limit_1_20" }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ChipsResponse"
                    }
                }
            }
        },
        "/nta/chips/{chip_id}": {
            "get": {
                "summary": "Get Chips by chip id",
                "description": "Get Chips by chip id",
                "tags": [
                    "Chips",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "chip_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Chip"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/nta/chips/{chip_id}/image.svg": {
            "get": {
                "summary": "Get Chips image by id",
                "description": "Get Chips image by chip id",
                "tags": [
                    "Chips",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "chip_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "image/svg+xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/nta/snapshots/nodes/count": {
            "get": {
                "summary": "Get snapshots of Node count",
                "description": "Get snapshots of Node count",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "date": {
                                                        "type": "string"
                                                    },
                                                    "count": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "example": {
                                    "data": [
                                        {
                                            "date": "2024-02-19",
                                            "count": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/snapshots/nodes/min_tokens_to_stake": {
            "post": {
                "summary": "Get snapshots of the minimum staking amount",
                "description": "Get snapshots of the minimum staking amount for Nodes",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "node_addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "only_start_and_end": {
                                        "type": "boolean",
                                        "description": "If true, only return the start and end min_tokens_to_stake"
                                    }
                                },
                                "example": {
                                    "node_addresses": [
                                        "0x9c29e25d7e475caee73d4b7006f3b10e977773ac",
                                        "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                                    ],
                                    "only_start_and_end": true
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/NodeMinTokensToStakeSnapshot"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/snapshots/stakers/count": {
            "get": {
                "summary": "Get snapshots of staker count",
                "description": "Get snapshots of total staker count",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "date": {
                                                        "type": "string"
                                                    },
                                                    "count": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "example": {
                                    "data": [
                                        {
                                            "date": "2024-02-19",
                                            "count": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/snapshots/stakers/profit": {
            "get": {
                "summary": "Get snapshots of the staker profit",
                "description": "Get snapshots of the staker profit",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "staker_address",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of snapshots to return, if not provided, return all snapshots"
                    },
                    {
                        "name": "beforeDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "The date before which the snapshots are returned"
                    },
                    {
                        "name": "afterDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "The date after which the snapshots are returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StakerProfitSnapshot"
                                            }
                                        },
                                        "cursor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/snapshots/nodes/operation/profit": {
            "get": {
                "summary": "Get snapshots of operation profit",
                "description": "Get snapshots of operation profit",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "node_address",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of snapshots to return, if not provided, return all snapshots"
                    },
                    {
                        "name": "beforeDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "The date before which the snapshots are returned"
                    },
                    {
                        "name": "afterDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "The date after which the snapshots are returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OperationProfit"
                                            }
                                        },
                                        "cursor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/snapshots/epochs/apy": {
            "get": {
                "summary": "Get the apy of epoch snapshots",
                "description": "Get the apy of epoch snapshots",
                "tags": [
                    "Snapshots",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EpochAPYSnapshot"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/nodes": {
            "get": {
                "summary": "Get all Nodes",
                "description": "Get all Nodes",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of Nodes to return, default is 10, maximum is 50",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "minimum": 1,
                            "maximum": 50
                        }
                    },
                    {
                        "name": "node_address",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Node"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nta/nodes/{address}": {
            "get": {
                "summary": "Get Node by address",
                "description": "Get Node by address",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nta/nodes/{address}/avatar.svg": {
            "get": {
                "summary": "Get Node avatar by address",
                "description": "Get Node avatar by address",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "image/svg+xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nta/nodes/{address}/events": {
            "get": {
                "summary": "Get Node transaction events by address",
                "description": "Get Node transaction events by address",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/NodeEvent"
                                            }
                                        },
                                        "cursor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nta/nodes/{node_address}/operation/profit": {
            "get": {
                "summary": "Get Node operation profit by address",
                "description": "Get Node operation profit by Node address",
                "tags": [
                    "Node",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "node_address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "address": {
                                                    "type": "string"
                                                },
                                                "operation_pool": {
                                                    "type": "string"
                                                },
                                                "oneDay": {
                                                    "$ref": "#/components/schemas/OperationProfitPNL"
                                                },
                                                "oneWeek": {
                                                    "$ref": "#/components/schemas/OperationProfitPNL"
                                                },
                                                "oneMonth": {
                                                    "$ref": "#/components/schemas/OperationProfitPNL"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/epochs": {
            "get": {
                "summary": "Get all epochs",
                "description": "Get all epochs",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "minimum": 1,
                            "maximum": 50
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BriefEpoch"
                                            }
                                        },
                                        "cursor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/epochs/{epoch_id}": {
            "get": {
                "summary": "Get epoch by id",
                "description": "Get epoch by epoch id",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "epoch_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Epoch"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/epochs/distributions/{transaction_hash}": {
            "get": {
                "summary": "Get epoch transaction by hash",
                "description": "Get epoch transaction by hash",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "transaction_hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EpochDistribution"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/epochs/{node_address}/rewards": {
            "get": {
                "summary": "Get Node rewards by epoch",
                "description": "Get Node rewards by epoch",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "node_address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 1,
                            "maximum": 50
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Epoch"
                                            }
                                        },
                                        "cursor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/epochs/apy": {
            "get": {
                "summary": "Get the average of epochs APY",
                "description": "Get the average of epochs APY",
                "tags": [
                    "Epoch",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/nta/networks": {
            "get": {
                "summary": "Get all compatible networks",
                "description": "Get all compatible networks",
                "tags": [
                    "Networks",
                    "NTA"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nta/networks/{network_name}/list_workers": {
            "get": {
                "summary": "Get available workers by network",
                "description": "Get available workers by network",
                "tags": [
                    "Networks",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "network_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nta/networks/{network_name}/workers/{worker_name}": {
            "get": {
                "summary": "Get config by network and worker",
                "description": "Get config by network and worker",
                "tags": [
                    "Networks",
                    "NTA"
                ],
                "parameters": [
                    {
                        "name": "network_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "worker_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/NetworkWorker"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Action": {
                "description": "Represents an individual action within an activity.",
                "properties": {
                    "from": {
                        "description": "The address from which the action originated.",
                        "type": "string"
                    },
                    "metadata": {
                        "description": "Additional metadata related to the action.",
                        "type": "object"
                    },
                    "platform": {
                        "$ref": "#/components/schemas/Platform"
                    },
                    "related_urls": {
                        "description": "A list of URLs related to the action.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/Tag"
                    },
                    "to": {
                        "description": "The address to which the action is directed.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of action performed.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ActivitiesResponse": {
                "description": "The response structure for a list of activities.",
                "properties": {
                    "data": {
                        "description": "The list of activities.",
                        "items": {
                            "$ref": "#/components/schemas/Activity"
                        },
                        "type": "array"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaCursor"
                    }
                },
                "type": "object"
            },
            "Activity": {
                "properties": {
                    "actions": {
                        "description": "The list of actions within the activity.",
                        "items": {
                            "$ref": "#/components/schemas/Action"
                        },
                        "type": "array"
                    },
                    "calldata": {
                        "$ref": "#/components/schemas/Calldata"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/Direction"
                    },
                    "fee": {
                        "$ref": "#/components/schemas/Fee"
                    },
                    "from": {
                        "description": "The address from which the activity originated.",
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the activity.",
                        "type": "string"
                    },
                    "index": {
                        "description": "The index of the activity in the list.",
                        "type": "integer"
                    },
                    "network": {
                        "$ref": "#/components/schemas/Network"
                    },
                    "owner": {
                        "description": "The owner of the activity.",
                        "type": "string"
                    },
                    "platform": {
                        "$ref": "#/components/schemas/Platform"
                    },
                    "success": {
                        "description": "Indicates whether the activity was successful.",
                        "type": "boolean"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/Tag"
                    },
                    "timestamp": {
                        "description": "The timestamp of when the activity occurred.",
                        "type": "integer"
                    },
                    "to": {
                        "description": "The address to which the activity is directed.",
                        "type": "string"
                    },
                    "total_actions": {
                        "description": "The total number of actions within the activity.",
                        "type": "integer"
                    },
                    "type": {
                        "$ref": "#/components/schemas/Type"
                    }
                },
                "type": "object"
            },
            "ActivityResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Activity"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaTotalPages"
                    }
                },
                "type": "object"
            },
            "Calldata": {
                "description": "Represents the call data associated with an activity.",
                "properties": {
                    "function_hash": {
                        "description": "The hash of the function called.",
                        "type": "string"
                    },
                    "parsed_function": {
                        "description": "The parsed function name.",
                        "type": "string"
                    },
                    "raw": {
                        "description": "The raw call data.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Direction": {
                "description": "The direction of an activity.",
                "type": "string",
                "enum": [
                    "in",
                    "out",
                    "self"
                ]
            },
            "Tag": {
                "description": "A tag used to categorize activities.",
                "type": "string",
                "enum": [
                    "collectible",
                    "exchange",
                    "metaverse",
                    "rss",
                    "social",
                    "transaction",
                    "unknown"
                ]
            },
            "Network": {
                "description": "The network on which activities occur.",
                "type": "string",
                "enum": [
                    "arbitrum",
                    "arweave",
                    "avax",
                    "base",
                    "binance-smart-chain",
                    "crossbell",
                    "ethereum",
                    "farcaster",
                    "gnosis",
                    "linea",
                    "optimism",
                    "polygon",
                    "vsl"
                ]
            },
            "Platform": {
                "description": "The platform on which activities occur.",
                "type": "string",
                "enum": [
                    "1inch",
                    "AAVE",
                    "Aavegotchi",
                    "Crossbell",
                    "Curve",
                    "ENS",
                    "Farcaster",
                    "Highlight",
                    "IQWiki",
                    "KiwiStand",
                    "Lens",
                    "Lido",
                    "LooksRare",
                    "Matters",
                    "Mirror",
                    "OpenSea",
                    "Optimism",
                    "Paragraph",
                    "RSS3",
                    "SAVM",
                    "Stargate",
                    "Uniswap",
                    "Unknown",
                    "VSL"
                ]
            },
            "Fee": {
                "description": "Represents fee information for an activity.",
                "properties": {
                    "address": {
                        "description": "The address to which the fee is paid.",
                        "type": "string"
                    },
                    "amount": {
                        "description": "The amount of the fee.",
                        "type": "string"
                    },
                    "decimal": {
                        "description": "The decimal precision of the fee amount.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "MetaCursor": {
                "description": "Metadata for paginated responses.",
                "properties": {
                    "cursor": {
                        "description": "The cursor for the next set of results.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MetaTotalPages": {
                "description": "Metadata indicating the total number of pages.",
                "properties": {
                    "totalPages": {
                        "description": "The total number of pages available.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "BridgeTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "0xdbfa26e70977dfe2d68f3da7dd7d9e0c04136ecf14e80b98b209314ae7c462ff"
                    },
                    "sender": {
                        "type": "string",
                        "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    },
                    "receiver": {
                        "type": "string",
                        "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    },
                    "token": {
                        "type": "object",
                        "properties": {
                            "address": {
                                "type": "object",
                                "properties": {
                                    "l1": {
                                        "type": "string",
                                        "example": "0x3ef1d5be1e2ce46c583a0c8e511f015706a0ab23"
                                    },
                                    "l2": {
                                        "type": "string",
                                        "example": "0x4200000000000000000000000000000000000042"
                                    }
                                }
                            },
                            "value": {
                                "type": "string",
                                "example": "10000000000000000000000"
                            }
                        }
                    },
                    "event": {
                        "properties": {
                            "deposit": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "initialized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "finalized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "withdraw": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "initialized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "proved": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "finalized": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StakeTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "0xcb4038576ed46c3913915435c7ccb7316cf83c626dfcf580d0b84b86702e76eb"
                    },
                    "staker": {
                        "type": "string",
                        "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
                    },
                    "node": {
                        "type": "string",
                        "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    },
                    "value": {
                        "type": "string",
                        "example": "5000000000000000000000"
                    },
                    "chips": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/Chip"
                        }
                    },
                    "event": {
                        "properties": {
                            "deposit": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "requested": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "claimed": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "withdraw": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "deposited": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "stake": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "staked": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            },
                            "unstake": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                    "requested": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    },
                                    "claimed": {
                                        "$ref": "#/components/schemas/TransactionEvent"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TransactionEvent": {
                "type": "object",
                "nullable": true,
                "properties": {
                    "block": {
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "example": {
                    "block": {
                        "hash": "0x200b26e118e51f23d052ef3aa92bc411dbd0a6ce811f511adb9f6049dc938614",
                        "number": 726419,
                        "timestamp": 1708337158
                    },
                    "transaction": {
                        "hash": "0x6595192f1193c2584c28e7d4b50b9208242bf9b4538933f0081d3f4625373d2f",
                        "index": 1
                    }
                }
            },
            "StakeStaking": {
                "type": "object",
                "properties": {
                    "staker": {
                        "type": "string",
                        "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1"
                    },
                    "node": {
                        "type": "string",
                        "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    },
                    "chips": {
                        "type": "object",
                        "properties": {
                            "total": {
                                "type": "integer"
                            },
                            "showcase": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Chip"
                                }
                            }
                        }
                    }
                }
            },
            "Chip": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1690
                    },
                    "node": {
                        "type": "string",
                        "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                    },
                    "owner": {
                        "type": "string",
                        "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944"
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "Open Chips #1690"
                            },
                            "description": {
                                "type": "string",
                                "example": "Chip Monsters are unique creatures living in the RSS3 Network, each one special because of where it was born. They represent the idea of FREE and OPEN INFORMATION, thriving in a world that values sharing and being different. These Chip Monsters are more than just digital; they symbolize the excitement and importance of being unique in a connected digital world."
                            },
                            "image": {
                                "type": "string",
                                "example": "https://gi.rss3.io/nta/chips/1690/image.svg"
                            }
                        }
                    },
                    "value": {
                        "type": "string",
                        "description": "the value at time of minting",
                        "example": "500000000000000000000"
                    },
                    "latest_value": {
                        "type": "string",
                        "description": "The latest value of the chip",
                        "example": "613891695796128425340"
                    }
                }
            },
            "Node": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "address": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "tax_rate_basis_points": {
                        "type": "integer",
                        "nullable": true
                    },
                    "is_public_good": {
                        "type": "boolean"
                    },
                    "operation_pool_tokens": {
                        "type": "string"
                    },
                    "staking_pool_tokens": {
                        "type": "string"
                    },
                    "total_shares": {
                        "type": "string"
                    },
                    "slashed_tokens": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "registered",
                            "online",
                            "offline",
                            "exited"
                        ]
                    },
                    "last_heartbeat": {
                        "type": "integer",
                        "description": "The timestamp of the last heartbeat"
                    },
                    "local": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "country": {
                                    "type": "string"
                                },
                                "region": {
                                    "type": "string"
                                },
                                "city": {
                                    "type": "string"
                                },
                                "latitude": {
                                    "type": "number"
                                },
                                "longitude": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "avatar": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "image": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        }
                    },
                    "min_tokens_to_stake": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The timestamp of the Node creation"
                    }
                },
                "example": {
                    "id": 1,
                    "address": "0xc5999271b01afc77ed7a6738b40c34677c2a581c",
                    "name": "RSS3 Node",
                    "description": "Get started with RSS3 Node with symphonia",
                    "tax_rate_basis_points": 1000,
                    "is_public_good": false,
                    "operation_pool_tokens": "10000000000000000000000",
                    "staking_pool_tokens": "0",
                    "total_shares": "0",
                    "slashed_tokens": "0",
                    "status": "online",
                    "last_heartbeat": 1709117916,
                    "local": [
                        {
                            "country": "CN",
                            "region": "GD",
                            "city": "SZ",
                            "latitude": 22.5431,
                            "longitude": 114.0579
                        }
                    ],
                    "avatar": [
                        {
                            "name": "Node Avatar",
                            "description": "",
                            "image": "http://127.0.0.1/nodes/0xC5999271b01AfC77ED7a6738b40C34677C2A581c/avatar.svg"
                        }
                    ],
                    "min_tokens_to_stake": "0",
                    "created_at": 1709087910
                }
            },
            "NodeEvent": {
                "type": "object",
                "properties": {
                    "address_from": {
                        "type": "string"
                    },
                    "address_to": {
                        "type": "string"
                    },
                    "node_id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "node_created",
                            "node_updated",
                            "node_updated_to_public_good"
                        ]
                    },
                    "log_index": {
                        "type": "integer"
                    },
                    "chain_id": {
                        "type": "integer"
                    },
                    "block": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "node_created": {
                                "type": "object",
                                "properties": {
                                    "node_id": {
                                        "type": "integer"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "tax_rate_basis_points": {
                                        "type": "integer"
                                    },
                                    "is_public_good": {
                                        "type": "boolean"
                                    }
                                }
                            },
                            "node_updated": {
                                "type": "object",
                                "properties": {
                                    "address": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                }
                            },
                            "node_updated_to_public_good": {
                                "type": "object",
                                "properties": {
                                    "address": {
                                        "type": "string"
                                    },
                                    "is_public_good": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NodeMinTokensToStakeSnapshot": {
                "type": "object",
                "properties": {
                    "node_address": {
                        "type": "string"
                    },
                    "snapshots": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "example": "2024-03-13T00:08:38+08:00"
                                },
                                "epoch_id": {
                                    "type": "integer"
                                },
                                "node_address": {
                                    "type": "string"
                                },
                                "min_tokens_to_stake": {
                                    "type": "string"
                                },
                                "created_at": {
                                    "type": "string"
                                },
                                "updated_at": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "StakerProfitSnapshot": {
                "type": "object",
                "properties": {
                    "owner_address": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "example": "2024-03-13T00:08:38+08:00"
                    },
                    "epoch_id": {
                        "type": "integer"
                    },
                    "total_chip_amount": {
                        "type": "string"
                    },
                    "total_chip_value": {
                        "type": "string"
                    }
                }
            },
            "ChipPNL": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "example": "2024-06-14T01:57:07Z"
                    },
                    "total_chip_amount": {
                        "type": "string",
                        "example": "24"
                    },
                    "total_chip_value": {
                        "type": "string",
                        "example": "14459771035071565497880"
                    },
                    "profit_and_loss": {
                        "type": "string",
                        "example": "0.0066375630868202"
                    }
                }
            },
            "OperationProfit": {
                "type": "object",
                "properties": {
                    "node_address": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "example": "2024-03-13T00:08:38+08:00"
                    },
                    "epoch_id": {
                        "type": "integer"
                    },
                    "operation_pool": {
                        "type": "string"
                    }
                }
            },
            "OperationProfitPNL": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string"
                    },
                    "operation_pool": {
                        "type": "string"
                    },
                    "profit_and_loss": {
                        "type": "string"
                    }
                }
            },
            "BriefEpoch": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "start_timestamp": {
                        "type": "integer"
                    },
                    "end_timestamp": {
                        "type": "integer"
                    },
                    "total_operation_rewards": {
                        "type": "string"
                    },
                    "total_staking_rewards": {
                        "type": "string"
                    },
                    "total_request_counts": {
                        "type": "string"
                    },
                    "total_reward_items": {
                        "type": "integer"
                    },
                    "distributions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BriefEpochDistribution"
                        }
                    }
                }
            },
            "Epoch": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "start_timestamp": {
                        "type": "integer"
                    },
                    "end_timestamp": {
                        "type": "integer"
                    },
                    "total_operation_rewards": {
                        "type": "string"
                    },
                    "total_staking_rewards": {
                        "type": "string"
                    },
                    "total_request_counts": {
                        "type": "string"
                    },
                    "total_reward_items": {
                        "type": "integer"
                    },
                    "distributions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EpochDistribution"
                        }
                    }
                }
            },
            "BriefEpochDistribution": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "start_timestamp": {
                        "type": "integer"
                    },
                    "end_timestamp": {
                        "type": "integer"
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    },
                    "block": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "total_operation_rewards": {
                        "type": "string"
                    },
                    "total_staking_rewards": {
                        "type": "string"
                    },
                    "total_request_counts": {
                        "type": "string"
                    },
                    "total_reward_items": {
                        "type": "integer"
                    }
                }
            },
            "EpochDistribution": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "start_timestamp": {
                        "type": "integer"
                    },
                    "end_timestamp": {
                        "type": "integer"
                    },
                    "transaction": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            }
                        }
                    },
                    "block": {
                        "type": "object",
                        "properties": {
                            "hash": {
                                "type": "string"
                            },
                            "number": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "integer"
                            }
                        }
                    },
                    "total_operation_rewards": {
                        "type": "string"
                    },
                    "total_staking_rewards": {
                        "type": "string"
                    },
                    "total_request_counts": {
                        "type": "string"
                    },
                    "total_reward_items": {
                        "type": "integer"
                    },
                    "reward_items": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "epoch_id": {
                                    "type": "integer"
                                },
                                "index": {
                                    "type": "integer"
                                },
                                "transaction_hash": {
                                    "type": "string"
                                },
                                "node_address": {
                                    "type": "string"
                                },
                                "operation_rewards": {
                                    "type": "string"
                                },
                                "staking_rewards": {
                                    "type": "string"
                                },
                                "tax_collected": {
                                    "type": "string"
                                },
                                "request_counts": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "WorkerDetail": {
                "type": "object",
                "properties": {
                    "is_required": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "NetworkWorker": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "network": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "worker": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "endpoint": {
                        "$ref": "#/components/schemas/WorkerDetail"
                    },
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "rpc_thread_blocks": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            },
                            "rpc_batch_blocks": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            },
                            "rpc_batch_receipts": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            },
                            "rpc_batch_block_receipts": {
                                "$ref": "#/components/schemas/WorkerDetail"
                            }
                        }
                    }
                },
                "example": {
                    "id": {
                        "is_required": true,
                        "type": "string",
                        "value": "ethereum-core",
                        "description": "You can define your own worker id, you are recommended to use `[network]-[worker]`"
                    },
                    "network": {
                        "is_required": true,
                        "type": "string",
                        "value": "ethereum",
                        "description": "Your worker is running on the defined network"
                    },
                    "worker": {
                        "is_required": true,
                        "type": "string",
                        "value": "core",
                        "description": "Your worker is running the defined worker"
                    },
                    "endpoint": {
                        "is_required": true,
                        "type": "string",
                        "value": "https://rpc.ankr.com/eth",
                        "description": "You can fill this field with a global endpoint id (should be pre-defined in endpoints part) or a url"
                    },
                    "parameters": {
                        "rpc_thread_blocks": {
                            "is_required": false,
                            "type": "uint",
                            "value": "8",
                            "description": "The number of blocks to process in a thread"
                        },
                        "rpc_batch_blocks": {
                            "is_required": false,
                            "type": "uint",
                            "value": "8",
                            "description": "The number of blocks to process in a batch"
                        },
                        "rpc_batch_receipts": {
                            "is_required": false,
                            "type": "uint",
                            "value": "200",
                            "description": "The number of receipts to process in a batch"
                        },
                        "rpc_batch_block_receipts": {
                            "is_required": false,
                            "type": "uint",
                            "value": "8",
                            "description": "The number of block receipts to process in a batch"
                        }
                    }
                }
            },
            "EpochAPYSnapshot": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string"
                    },
                    "epoch_id": {
                        "type": "integer"
                    },
                    "apy": {
                        "type": "string"
                    }
                },
                "example": {
                    "date": "2024-03-13T00:08:38+08:00",
                    "epoch_id": 1,
                    "apy": "0.1"
                }
            },
            "ResponseError": {
                "type": "object",
                "properties": {
                    "error_code": {
                        "type": "string",
                        "enum": [
                            "bad_request",
                            "validate_failed",
                            "bad_params",
                            "internal_error"
                        ]
                    },
                    "error": {
                        "type": "string"
                    },
                    "details": {
                        "type": "string"
                    }
                }
            },
            "Type": {
                "description": "The type of activity.",
                "type": "string",
                "enum": [
                    "approval",
                    "bridge",
                    "burn",
                    "comment",
                    "delete",
                    "feed",
                    "liquidity",
                    "mint",
                    "post",
                    "profile",
                    "proxy",
                    "revise",
                    "reward",
                    "share",
                    "staking",
                    "swap",
                    "trade",
                    "transfer",
                    "unknown"
                ]
            }
        },
        "parameters": {
            "activity_id_path": {
                "description": "Retrieve details for the specified activity ID",
                "example": "0x000000000000000000000000113f4b4c3765e5f05fd197c5c35b8a8a9b34245b",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "activity_id_query": {
                "description": "Retrieve details for the specified activity ID",
                "example": "0x000000000000000000000000113f4b4c3765e5f05fd197c5c35b8a8a9b34245b",
                "in": "query",
                "name": "id",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "action_limit_query": {
                "description": "Specify the number of actions within the activity to retrieve",
                "example": "10",
                "in": "query",
                "name": "action_limit",
                "required": false,
                "schema": {
                    "default": 10,
                    "maximum": 20,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "action_page_query": {
                "description": "Specify the pagination for actions",
                "example": 1,
                "in": "query",
                "name": "action_page",
                "required": false,
                "schema": {
                    "default": 1,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "account_path": {
                "name": "account",
                "in": "path",
                "description": "Retrieve activities from the specified account. This account is a unique identifier within the decentralized system.",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
            },
            "limit_query": {
                "name": "limit",
                "in": "query",
                "description": "Specify the number of activities to retrieve. By default, this is set to 100, and the maximum allowed value is 100.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 100
                },
                "example": 20
            },
            "cursor_query": {
                "name": "cursor",
                "in": "query",
                "description": "Specify the cursor used for pagination. This helps in retrieving the next set of results in a paginated response.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "since_timestamp_query": {
                "name": "since_timestamp",
                "in": "query",
                "description": "Retrieve activities starting from this timestamp. The timestamp is specified in Unix epoch time.",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "until_timestamp_query": {
                "name": "until_timestamp",
                "in": "query",
                "description": "Retrieve activities up to this timestamp. The timestamp is specified in Unix epoch time.",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "success_query": {
                "name": "success",
                "in": "query",
                "description": "Retrieve activities based on success status. Specify true for successful activities or false for unsuccessful ones.",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "direction_query": {
                "name": "direction",
                "in": "query",
                "description": "Retrieve activities based on direction. The direction specifies whether the activity is incoming or outgoing.",
                "required": false,
                "schema": {
                    "$ref": "#/components/schemas/Direction"
                }
            },
            "network_query": {
                "name": "network",
                "in": "query",
                "description": "Retrieve activities from the specified network(s). You can specify one or more networks.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Network"
                    }
                }
            },
            "action_tag_query": {
                "name": "tag",
                "in": "query",
                "description": "Retrieve activities from the specified tag(s). Tags can be used to categorize activities.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Tag"
                    }
                }
            },
            "action_type_query": {
                "name": "type",
                "in": "query",
                "description": "Retrieve activities from the specified type(s). Types can help filter activities based on their nature or category.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Type"
                    }
                }
            },
            "platform_query": {
                "name": "platform",
                "in": "query",
                "description": "Retrieve activities from the specified platform(s). Platforms refer to the systems or environments where the activities occurred.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/Platform"
                    }
                }
            },
            "rss_path": {
                "description": "Retrieve details for the specified RSS path",
                "example": "abc",
                "in": "path",
                "name": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "sender_query": {
                "name": "sender",
                "in": "query",
                "required": false,
                "description": "Sender address",
                "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1",
                "schema": {
                    "type": "string"
                }
            },
            "receiver_query": {
                "name": "receiver",
                "in": "query",
                "required": false,
                "description": "Receiver address",
                "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1",
                "schema": {
                    "type": "string"
                }
            },
            "address_query": {
                "name": "address",
                "in": "query",
                "required": false,
                "description": "Address involved in the transaction",
                "example": "0x3b6d02a24df681ffdf621d35d70aba7adaac07c1",
                "schema": {
                    "type": "string"
                }
            },
            "bridging_type_query": {
                "name": "type",
                "in": "query",
                "required": false,
                "description": "Type of bridging transaction",
                "schema": {
                    "type": "string",
                    "enum": [
                        "deposit",
                        "withdraw"
                    ]
                }
            },
            "limit_1_20": {
                "name": "limit",
                "in": "query",
                "description": "Limit the number of results",
                "example": 20,
                "schema": {
                    "type": "integer",
                    "default": 20
                }
            },
            "bridging_transaction_hash_path": {
                "name": "transaction_hash",
                "in": "path",
                "required": true,
                "description": "The unique hash of the bridging transaction",
                "example": "0xdbfa26e70977dfe2d68f3da7dd7d9e0c04136ecf14e80b98b209314ae7c462ff",
                "schema": {
                    "type": "string"
                }
            },
            "staking_transaction_hash_path": {
                "name": "transaction_hash",
                "in": "path",
                "required": true,
                "description": "The unique hash of the staking transaction",
                "example": "0xcb4038576ed46c3913915435c7ccb7316cf83c626dfcf580d0b84b86702e76eb",
                "schema": {
                    "type": "string"
                }
            },
            "staker_query": {
                "name": "staker",
                "in": "query",
                "required": false,
                "description": "Staker address",
                "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944",
                "schema": {
                    "type": "string"
                }
            },
            "node_query": {
                "name": "node",
                "in": "query",
                "required": false,
                "description": "Node address",
                "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2",
                "schema": {
                    "type": "string"
                }
            },
            "staking_type_query": {
                "name": "type",
                "in": "query",
                "required": false,
                "description": "Type of staking transaction",
                "schema": {
                    "type": "string",
                    "enum": [
                        "deposit",
                        "withdraw",
                        "stake",
                        "unstake"
                    ]
                }
            },
            "pending_query": {
                "name": "pending",
                "in": "query",
                "required": false,
                "description": "Pending status of the transaction",
                "schema": {
                    "type": "boolean"
                }
            },
            "staker_address_path": {
                "name": "staker_address",
                "in": "path",
                "required": true,
                "description": "The address of the staker whose profit information is to be retrieved.",
                "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944",
                "schema": {
                    "type": "string"
                }
            },
            "chip_ids_query": {
                "name": "id",
                "in": "query",
                "required": false,
                "description": "Array of chip IDs to filter the results.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "example": [1690]
            },
            "owner_query": {
                "name": "owner",
                "in": "query",
                "required": false,
                "description": "The address of the chip owner to filter the results.",
                "example": "0xc8b960d09c0078c18dcbe7eb9ab9d816bcca8944",
                "schema": {
                    "type": "string"
                }
            }
        },
        "responses": {
            "ActivityResponse": {
                "description": "A successful response containing the details of the specified activity. The response includes the activity ID, timestamp, and a list of actions performed within the activity.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ActivityResponse"
                        }
                    }
                }
            },
            "ActivitiesResponse": {
                "description": "A successful response with the activities from the specified account. The response includes details about each activity, such as its ID, timestamp, and associated actions.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ActivitiesResponse"
                        }
                    }
                }
            },
            "BridgeTransactionsResponse": {
                "description": "List of bridging transactions retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BridgeTransaction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "BridgeTransactionByHashResponse": {
                "description": "Bridging transaction details fetched successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/BridgeTransaction"
                                }
                            }
                        }
                    }
                }
            },
            "StakeTransactionsResponse": {
                "description": "List of staking transactions retrieved successfully with pagination cursor",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StakeTransaction"
                                    }
                                },
                                "cursor": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "StakeTransactionByHashResponse": {
                "description": "Staking transaction details fetched successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/StakeTransaction"
                                }
                            }
                        }
                    }
                }
            },
            "StakeStakingsResponse": {
                "description": "A successful response containing a list of stakers and their associated nodes. Each entry in the data array represents a staker and includes detailed information about the staker, the node they are associated with, and any associated chips. The response also includes a cursor for pagination to fetch subsequent sets of results. This allows users to retrieve large datasets incrementally.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StakeStaking"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results.",
                                    "example": "0xc7d6378960bd3374c31ce6223df0e79355ff3dc4b6dccf28afe84487321ef9fb"
                                }
                            }
                        }
                    }
                }
            },
            "StakingProfitResponse": {
                "description": "A successful response containing the staking profit information for the specified staker. The data includes the owner's address, total chip amount, total chip value, and profit and loss (PNL) data for one day, one week, and one month.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "description": "Staking profit information for the specified staker.",
                                    "properties": {
                                        "owner": {
                                            "type": "string",
                                            "description": "The address of the staker.",
                                            "example": "0x827431510a5d249ce4fdb7f00c83a3353f471848"
                                        },
                                        "total_chip_amount": {
                                            "type": "string",
                                            "description": "The total amount of chips owned by the staker.",
                                            "example": "1000"
                                        },
                                        "total_chip_value": {
                                            "type": "string",
                                            "description": "The total value of chips owned by the staker.",
                                            "example": "100000"
                                        },
                                        "oneDay": {
                                            "$ref": "#/components/schemas/ChipPNL"
                                        },
                                        "oneWeek": {
                                            "$ref": "#/components/schemas/ChipPNL"
                                        },
                                        "oneMonth": {
                                            "$ref": "#/components/schemas/ChipPNL"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ChipsResponse": {
                "description": "A successful response containing a list of chips based on the provided filters. Each chip includes detailed information such as its ID, node address, owner address, and metadata. The response also includes a cursor for pagination to fetch subsequent sets of results.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "description": "Array of chips matching the filter criteria.",
                                    "items": {
                                        "$ref": "#/components/schemas/Chip"
                                    }
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Cursor for pagination to fetch the next set of results.",
                                    "example": "0x08d66b34054a174841e2361bd4746ff9f4905cc2"
                                }
                            }
                        }
                    }
                }
            },
            "400": {
                "description": "The request was invalid or malformed.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ResponseError"
                        },
                        "examples": {
                            "bad_request": {
                                "value": {
                                    "error_code": "bad_request",
                                    "error": "Invalid request. Please check your input and try again."
                                }
                            },
                            "validate_failed": {
                                "value": {
                                    "error_code": "validate_failed",
                                    "error": "Validation failed. Ensure all fields meet the required criteria and try again."
                                }
                            },
                            "bad_params": {
                                "value": {
                                    "error_code": "bad_params",
                                    "error": "Invalid parameter combination. Verify the combination and try again."
                                }
                            }
                        }
                    }
                }
            },
            "500": {
                "description": "An internal server error occurred while processing the request.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ResponseError"
                        },
                        "example": {
                            "error_code": "internal_error",
                            "error": "An internal error has occurred, please try again later."
                        }
                    }
                }
            }
        }
    }
}
