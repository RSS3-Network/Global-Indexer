// Code generated by "enumer --values --type=NodeVersion --linecomment --output node_version_string.go --json --yaml --sql"; DO NOT EDIT.

package schema

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeVersionName = "alphabetanormal"

var _NodeVersionIndex = [...]uint8{0, 5, 9, 15}

const _NodeVersionLowerName = "alphabetanormal"

func (i NodeVersion) String() string {
	if i < 0 || i >= NodeVersion(len(_NodeVersionIndex)-1) {
		return fmt.Sprintf("NodeVersion(%d)", i)
	}
	return _NodeVersionName[_NodeVersionIndex[i]:_NodeVersionIndex[i+1]]
}

func (NodeVersion) Values() []string {
	return NodeVersionStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeVersionNoOp() {
	var x [1]struct{}
	_ = x[NodeVersionAlpha-(0)]
	_ = x[NodeVersionBeta-(1)]
	_ = x[NodeVersionNormal-(2)]
}

var _NodeVersionValues = []NodeVersion{NodeVersionAlpha, NodeVersionBeta, NodeVersionNormal}

var _NodeVersionNameToValueMap = map[string]NodeVersion{
	_NodeVersionName[0:5]:       NodeVersionAlpha,
	_NodeVersionLowerName[0:5]:  NodeVersionAlpha,
	_NodeVersionName[5:9]:       NodeVersionBeta,
	_NodeVersionLowerName[5:9]:  NodeVersionBeta,
	_NodeVersionName[9:15]:      NodeVersionNormal,
	_NodeVersionLowerName[9:15]: NodeVersionNormal,
}

var _NodeVersionNames = []string{
	_NodeVersionName[0:5],
	_NodeVersionName[5:9],
	_NodeVersionName[9:15],
}

// NodeVersionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeVersionString(s string) (NodeVersion, error) {
	if val, ok := _NodeVersionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeVersionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeVersion values", s)
}

// NodeVersionValues returns all values of the enum
func NodeVersionValues() []NodeVersion {
	return _NodeVersionValues
}

// NodeVersionStrings returns a slice of all String values of the enum
func NodeVersionStrings() []string {
	strs := make([]string, len(_NodeVersionNames))
	copy(strs, _NodeVersionNames)
	return strs
}

// IsANodeVersion returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeVersion) IsANodeVersion() bool {
	for _, v := range _NodeVersionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeVersion
func (i NodeVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeVersion
func (i *NodeVersion) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeVersion should be a string, got %s", data)
	}

	var err error
	*i, err = NodeVersionString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for NodeVersion
func (i NodeVersion) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for NodeVersion
func (i *NodeVersion) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = NodeVersionString(s)
	return err
}

func (i NodeVersion) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *NodeVersion) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of NodeVersion: %[1]T(%[1]v)", value)
	}

	val, err := NodeVersionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
